{
  "hash": "f078ea35696dedadabd5c0236568c5bf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Functional programming\"\nauthor: \n  - name: Stephanie Hicks\n    url: https://stephaniehicks.com\n    affiliation: Department of Biostatistics, Johns Hopkins\n    affiliation_url: https://publichealth.jhu.edu\ndescription: \"Using the `purrr` package to work with functions and vectors\"\ndate: 2025-11-04\ndraft: true\n---\n\n\n# Pre-lecture activities\n\n::: callout-important\n\nIn advance of class, please install\n\n* `purrr` - this provides a consistent functional programming interface to work with functions and vectors\n\nYou can do this by calling\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"purrr\")\n```\n:::\n\n\nAnd load the package using: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)\n```\n:::\n\n\n:::\n\nIn addition, please read through\n\n- [Functional programming](../../readings/03-functional-programming/index.qmd)\n- <https://adv-r.hadley.nz/functionals.html>\n- <https://raw.githubusercontent.com/rstudio/cheatsheets/main/purrr.pdf>\n\n\n::: callout-note\n\n## How much should I prepare for before class? \n\nYou should have `purrr` installed and be familiar with the [`map()` function](https://adv-r.hadley.nz/functionals.html#map) along with [map variants](https://adv-r.hadley.nz/functionals.html#map-variants) in `purrr`. \n\nWe will learn more about these functions in class, but we will also practice them at the end of class. \n\n:::\n\n\n# Lecture \n\n## Acknowledgements\n\nMaterial for this lecture was borrowed and adopted from\n\n- <https://adv-r.hadley.nz/fp.html>\n- <https://adv-r.hadley.nz/functionals.html>\n- <https://raw.githubusercontent.com/rstudio/cheatsheets/main/purrr.pdf>\n\n\n## Learning objectives\n\n::: callout-note\n### Learning objectives\n\n**At the end of this lesson you will:**\n\n- Be familiar with the concept of _functional languages_ and _functional styles_ of programming\n- Get comfortable with the major functions in  `purrr` (e.g. the `map` family of functions) provides a nice interface to functional programming and list manipulation\n- Practice the function `map` and its alternative `map_*` provide a neat way to iterate over a list or vector with the output in different data structures (instead of a `for` loop)\n- Recongize the function `map2` and `pmap` allow having more than one list as input.\n- Recongize the function `walk` and its alternatives `walk2`, `walk_*`, which do not provide any output.\n\n:::\n\n## Slides \n\n- [Lecture 03: Functional programming](https://docs.google.com/presentation/d/1t-io1cFFiWopAzN1saz2j0xnmMg3O60Y5NnOvQrsdpk/edit?usp=sharing)\n\n# Class activity \n\nFor the rest of the time in class, we will use the `mtcars` dataset to practice using functions from the `purrr` package. The purpose is to demonstrates how functional programming can simplify repeated operations on datasets. This dataset contains various measurements for different car models. Find a partner and complete the activities below together. After running each step, I encourage you to look at the outputs and transformations to understand how `purrr` is working with each column in the dataset.\n\n\n::: callout-note\n### Objectives of the activity\n\n- Use `purrr::map_*` functions to calculate summary statistics for each column.\n- Transform specific columns using functions from `purrr`.\n- Apply a conditional transformation across the dataset.\n\n:::\n\nFirst, we will load two packages and create a copy of the `mtcars` dataset\n\n\n::: {.cell messages='false'}\n\n```{.r .cell-code}\nlibrary(purrr)\nlibrary(dplyr)\n\ndata <- mtcars\n```\n:::\n\n\n#### Part 1: Basic column summaries\n\n- Use `map_dbl()` to calculate the mean of each column in the mtcars dataset.\n\nHint: `map_dbl(data, mean)` will apply the mean function to each column and return a vector of means.\n\n- Use `map_dbl()` to calculate the standard deviation of each column.\n\n- Use `map()` to create a named list where each element is the range of values in a column.\n\n::: {.callout-tip collapse=\"true\"}\n### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the mean of each column\ncolumn_means <- map_dbl(data, mean)\ncolumn_means\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       mpg        cyl       disp         hp       drat         wt       qsec \n 20.090625   6.187500 230.721875 146.687500   3.596563   3.217250  17.848750 \n        vs         am       gear       carb \n  0.437500   0.406250   3.687500   2.812500 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Calculate the standard deviation of each column\ncolumn_sds <- map_dbl(data, sd)\ncolumn_sds\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        mpg         cyl        disp          hp        drat          wt \n  6.0269481   1.7859216 123.9386938  68.5628685   0.5346787   0.9784574 \n       qsec          vs          am        gear        carb \n  1.7869432   0.5040161   0.4989909   0.7378041   1.6152000 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Calculate the range of each column\ncolumn_ranges <- map(data, range)\ncolumn_ranges\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$mpg\n[1] 10.4 33.9\n\n$cyl\n[1] 4 8\n\n$disp\n[1]  71.1 472.0\n\n$hp\n[1]  52 335\n\n$drat\n[1] 2.76 4.93\n\n$wt\n[1] 1.513 5.424\n\n$qsec\n[1] 14.5 22.9\n\n$vs\n[1] 0 1\n\n$am\n[1] 0 1\n\n$gear\n[1] 3 5\n\n$carb\n[1] 1 8\n```\n\n\n:::\n:::\n\n\nThe first one will return a named vector of mean values for each column. The last one returns a named list where each element is a vector of the minimum and maximum values for each column. \n\n:::\n\n#### Part 2: Conditional transformation with `map_if()`\n\n- Use `map_if()` to multiply by 100 all columns where the mean is less than 20. For example, if the column represents miles per gallon, multiply each value by 100. \n- Check the resulting data frame. \n\n::: {.callout-tip collapse=\"true\"}\n### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntransformed_data <- map_if(data, ~ mean(.x) < 20, ~ .x * 100)\ntransformed_data <- as.data.frame(transformed_data)  # Convert back to data frame if desired\ntransformed_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    mpg cyl  disp  hp drat    wt qsec  vs  am gear carb\n1  21.0 600 160.0 110  390 262.0 1646   0 100  400  400\n2  21.0 600 160.0 110  390 287.5 1702   0 100  400  400\n3  22.8 400 108.0  93  385 232.0 1861 100 100  400  100\n4  21.4 600 258.0 110  308 321.5 1944 100   0  300  100\n5  18.7 800 360.0 175  315 344.0 1702   0   0  300  200\n6  18.1 600 225.0 105  276 346.0 2022 100   0  300  100\n7  14.3 800 360.0 245  321 357.0 1584   0   0  300  400\n8  24.4 400 146.7  62  369 319.0 2000 100   0  400  200\n9  22.8 400 140.8  95  392 315.0 2290 100   0  400  200\n10 19.2 600 167.6 123  392 344.0 1830 100   0  400  400\n11 17.8 600 167.6 123  392 344.0 1890 100   0  400  400\n12 16.4 800 275.8 180  307 407.0 1740   0   0  300  300\n13 17.3 800 275.8 180  307 373.0 1760   0   0  300  300\n14 15.2 800 275.8 180  307 378.0 1800   0   0  300  300\n15 10.4 800 472.0 205  293 525.0 1798   0   0  300  400\n16 10.4 800 460.0 215  300 542.4 1782   0   0  300  400\n17 14.7 800 440.0 230  323 534.5 1742   0   0  300  400\n18 32.4 400  78.7  66  408 220.0 1947 100 100  400  100\n19 30.4 400  75.7  52  493 161.5 1852 100 100  400  200\n20 33.9 400  71.1  65  422 183.5 1990 100 100  400  100\n21 21.5 400 120.1  97  370 246.5 2001 100   0  300  100\n22 15.5 800 318.0 150  276 352.0 1687   0   0  300  200\n23 15.2 800 304.0 150  315 343.5 1730   0   0  300  200\n24 13.3 800 350.0 245  373 384.0 1541   0   0  300  400\n25 19.2 800 400.0 175  308 384.5 1705   0   0  300  200\n26 27.3 400  79.0  66  408 193.5 1890 100 100  400  100\n27 26.0 400 120.3  91  443 214.0 1670   0 100  500  200\n28 30.4 400  95.1 113  377 151.3 1690 100 100  500  200\n29 15.8 800 351.0 264  422 317.0 1450   0 100  500  400\n30 19.7 600 145.0 175  362 277.0 1550   0 100  500  600\n31 15.0 800 301.0 335  354 357.0 1460   0 100  500  800\n32 21.4 400 121.0 109  411 278.0 1860 100 100  400  200\n```\n\n\n:::\n:::\n\n\nThis will multiply each element in columns where the mean is less than 20 by 100. Note that the output is a list; converting it back to a data frame makes it easier to view the result.\n\n:::\n\n#### Part 3: Apply a custom function with `map()`\n\n- Write a custom function that takes a column and returns the log-transformed values if the mean of the column is greater than 20, otherwise returns the square root of the values. \n\n- Use `map()` to apply this custom function to each column.\n\n::: {.callout-tip collapse=\"true\"}\n### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntransform_column <- function(column) {\n  if (mean(column) > 20) {\n    log(column)\n  } else {\n    sqrt(column)\n  }\n}\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntransformed_data_custom <- map(data, transform_column)\ntransformed_data_custom <- as.data.frame(transformed_data_custom)\ntransformed_data_custom\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        mpg      cyl     disp       hp     drat       wt     qsec vs am\n1  3.044522 2.449490 5.075174 4.700480 1.974842 1.618641 4.057093  0  1\n2  3.044522 2.449490 5.075174 4.700480 1.974842 1.695582 4.125530  0  1\n3  3.126761 2.000000 4.682131 4.532599 1.962142 1.523155 4.313931  1  1\n4  3.063391 2.449490 5.552960 4.700480 1.754993 1.793042 4.409082  1  0\n5  2.928524 2.828427 5.886104 5.164786 1.774824 1.854724 4.125530  0  0\n6  2.895912 2.449490 5.416100 4.653960 1.661325 1.860108 4.496665  1  0\n7  2.660260 2.828427 5.886104 5.501258 1.791647 1.889444 3.979950  0  0\n8  3.194583 2.000000 4.988390 4.127134 1.920937 1.786057 4.472136  1  0\n9  3.126761 2.000000 4.947340 4.553877 1.979899 1.774824 4.785394  1  0\n10 2.954910 2.449490 5.121580 4.812184 1.979899 1.854724 4.277850  1  0\n11 2.879198 2.449490 5.121580 4.812184 1.979899 1.854724 4.347413  1  0\n12 2.797281 2.828427 5.619676 5.192957 1.752142 2.017424 4.171331  0  0\n13 2.850707 2.828427 5.619676 5.192957 1.752142 1.931321 4.195235  0  0\n14 2.721295 2.828427 5.619676 5.192957 1.752142 1.944222 4.242641  0  0\n15 2.341806 2.828427 6.156979 5.323010 1.711724 2.291288 4.240283  0  0\n16 2.341806 2.828427 6.131226 5.370638 1.732051 2.328948 4.221374  0  0\n17 2.687847 2.828427 6.086775 5.438079 1.797220 2.311926 4.173727  0  0\n18 3.478158 2.000000 4.365643 4.189655 2.019901 1.483240 4.412482  1  1\n19 3.414443 2.000000 4.326778 3.951244 2.220360 1.270827 4.303487  1  1\n20 3.523415 2.000000 4.264087 4.174387 2.054264 1.354622 4.460942  1  1\n21 3.068053 2.000000 4.788325 4.574711 1.923538 1.570032 4.473254  1  0\n22 2.740840 2.828427 5.762051 5.010635 1.661325 1.876166 4.107311  0  0\n23 2.721295 2.828427 5.717028 5.010635 1.774824 1.853375 4.159327  0  0\n24 2.587764 2.828427 5.857933 5.501258 1.931321 1.959592 3.925557  0  0\n25 2.954910 2.828427 5.991465 5.164786 1.754993 1.960867 4.129165  0  0\n26 3.306887 2.000000 4.369448 4.189655 2.019901 1.391043 4.347413  1  1\n27 3.258097 2.000000 4.789989 4.510860 2.104757 1.462874 4.086563  0  1\n28 3.414443 2.000000 4.554929 4.727388 1.941649 1.230041 4.110961  1  1\n29 2.760010 2.828427 5.860786 5.575949 2.054264 1.780449 3.807887  0  1\n30 2.980619 2.449490 4.976734 5.164786 1.902630 1.664332 3.937004  0  1\n31 2.708050 2.828427 5.707110 5.814131 1.881489 1.889444 3.820995  0  1\n32 3.063391 2.000000 4.795791 4.691348 2.027313 1.667333 4.312772  1  1\n       gear     carb\n1  2.000000 2.000000\n2  2.000000 2.000000\n3  2.000000 1.000000\n4  1.732051 1.000000\n5  1.732051 1.414214\n6  1.732051 1.000000\n7  1.732051 2.000000\n8  2.000000 1.414214\n9  2.000000 1.414214\n10 2.000000 2.000000\n11 2.000000 2.000000\n12 1.732051 1.732051\n13 1.732051 1.732051\n14 1.732051 1.732051\n15 1.732051 2.000000\n16 1.732051 2.000000\n17 1.732051 2.000000\n18 2.000000 1.000000\n19 2.000000 1.414214\n20 2.000000 1.000000\n21 1.732051 1.000000\n22 1.732051 1.414214\n23 1.732051 1.414214\n24 1.732051 2.000000\n25 1.732051 1.414214\n26 2.000000 1.000000\n27 2.236068 1.414214\n28 2.236068 1.414214\n29 2.236068 2.000000\n30 2.236068 2.449490\n31 2.236068 2.828427\n32 2.000000 1.414214\n```\n\n\n:::\n:::\n\n\n:::\n\n\n\n#### Part 4: Row-wise transformation and aggregation\n\n- First, define a function that assigns each row a fuel efficiency category based on `mpg`:\n\n  - \"High\" if `mpg` > 25\n  - \"Medium\" if `mpg` is between 20 and 25\n  - \"Low\" if `mpg` < 20\n\n- Use `map()` to apply this function row-wise and add the results as a new column in `mtcars`.\n\n- Then, split the dataset by fuel efficiency category from the previous step. For each category, calculate the mean values of `hp`, `wt`, and `qsec` (1/4 mile time).\n\n\n::: {.callout-tip collapse=\"true\"}\n### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to assign fuel efficiency category based on mpg\nfuel_efficiency <- function(row) {\n  mpg <- row[\"mpg\"]\n  if (mpg > 25) {\n    \"High\"\n  } else if (mpg >= 20) {\n    \"Medium\"\n  } else {\n    \"Low\"\n  }\n}\n\n# Add fuel efficiency as a new column\nmtcars$fuel_efficiency <- map_chr(asplit(mtcars, 1), fuel_efficiency)\nmtcars\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n                    fuel_efficiency\nMazda RX4                    Medium\nMazda RX4 Wag                Medium\nDatsun 710                   Medium\nHornet 4 Drive               Medium\nHornet Sportabout               Low\nValiant                         Low\nDuster 360                      Low\nMerc 240D                    Medium\nMerc 230                     Medium\nMerc 280                        Low\nMerc 280C                       Low\nMerc 450SE                      Low\nMerc 450SL                      Low\nMerc 450SLC                     Low\nCadillac Fleetwood              Low\nLincoln Continental             Low\nChrysler Imperial               Low\nFiat 128                       High\nHonda Civic                    High\nToyota Corolla                 High\nToyota Corona                Medium\nDodge Challenger                Low\nAMC Javelin                     Low\nCamaro Z28                      Low\nPontiac Firebird                Low\nFiat X1-9                      High\nPorsche 914-2                  High\nLotus Europa                   High\nFord Pantera L                  Low\nFerrari Dino                    Low\nMaserati Bora                   Low\nVolvo 142E                   Medium\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Split by fuel efficiency\nefficiency_groups <- split(mtcars, mtcars$fuel_efficiency)\n\n# Calculate mean hp, wt, and qsec for each group\nefficiency_summary <- map(efficiency_groups, ~ map_dbl(.x[, c(\"hp\", \"wt\", \"qsec\")], mean))\nefficiency_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$High\n      hp       wt     qsec \n75.50000  1.87300 18.39833 \n\n$Low\n        hp         wt       qsec \n191.944444   3.838833  17.096111 \n\n$Medium\n       hp        wt      qsec \n98.250000  2.826875 19.130000 \n```\n\n\n:::\n:::\n\n\n:::\n\n#### Part 5: Visualizations and transformations\n\n- Write a function that, for each row, converts `mpg` to a \"fuel cost\" using a hypothetical rate of $3 per gallon for a 100-mile journey where \"fuel cost\" = (100 mile journey / `mpg`) * $3 per gallon\n\n- Use `map_dbl()` to apply this transformation to the `mpg` column and add it as a new column called `fuel_cost`.\n\n- Using `map()` with `ggplot2`, create a bar plot of the average `fuel_cost` for each `cyl`. For each cylinder group, plot the average values of `mpg`, `hp`, and `wt`.\n\n\n\n::: {.callout-tip collapse=\"true\"}\n### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate fuel cost based on mpg\ncalculate_fuel_cost <- function(mpg) {\n  (100 / mpg) * 3\n}\n\n# Apply transformation to mpg column\nmtcars$fuel_cost <- map_dbl(mtcars$mpg, calculate_fuel_cost)\nmtcars\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n                    fuel_efficiency fuel_cost\nMazda RX4                    Medium 14.285714\nMazda RX4 Wag                Medium 14.285714\nDatsun 710                   Medium 13.157895\nHornet 4 Drive               Medium 14.018692\nHornet Sportabout               Low 16.042781\nValiant                         Low 16.574586\nDuster 360                      Low 20.979021\nMerc 240D                    Medium 12.295082\nMerc 230                     Medium 13.157895\nMerc 280                        Low 15.625000\nMerc 280C                       Low 16.853933\nMerc 450SE                      Low 18.292683\nMerc 450SL                      Low 17.341040\nMerc 450SLC                     Low 19.736842\nCadillac Fleetwood              Low 28.846154\nLincoln Continental             Low 28.846154\nChrysler Imperial               Low 20.408163\nFiat 128                       High  9.259259\nHonda Civic                    High  9.868421\nToyota Corolla                 High  8.849558\nToyota Corona                Medium 13.953488\nDodge Challenger                Low 19.354839\nAMC Javelin                     Low 19.736842\nCamaro Z28                      Low 22.556391\nPontiac Firebird                Low 15.625000\nFiat X1-9                      High 10.989011\nPorsche 914-2                  High 11.538462\nLotus Europa                   High  9.868421\nFord Pantera L                  Low 18.987342\nFerrari Dino                    Low 15.228426\nMaserati Bora                   Low 20.000000\nVolvo 142E                   Medium 14.018692\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\n# Calculate average fuel cost for each cylinder group\navg_fuel_cost <- mtcars %>%\n  group_by(cyl) %>%\n  summarize(avg_fuel_cost = mean(fuel_cost))\n\n# Plot average fuel cost by cylinder count\nggplot(avg_fuel_cost, aes(x = factor(cyl), y = avg_fuel_cost)) +\n  geom_bar(stat = \"identity\") +\n  labs(x = \"Number of Cylinders\", \n       y = \"Average Fuel Cost ($)\", \n       title = \"Fuel Cost by Cylinder Group\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n:::\n\n\n# Post-lecture\n\n## Additional practice\n\nHere are some additional practice questions to help you think about the material discussed.\n\n::: callout-note\n### Questions\n\n1. Use `as_mapper()` to explore how purrr generates anonymous functions for the integer, character, and list helpers. What helper allows you to extract attributes? Read the documentation to find out.\n\n2. `map(1:3, ~ runif(2))` is a useful pattern for generating random numbers, but `map(1:3, runif(2))` is not. Why not? Can you explain why it returns the result that it does?\n\n3. Can you write a section of code to demonstrate the central limit theorem primarily using the `purrr` package and/or using the R base package?  \n\n4.  Use the appropriate `map()` function to:\n    \n    a) Compute the standard deviation of every column in a numeric data frame.\n    \n    a) Compute the standard deviation of every numeric column in a mixed data\n       frame. (Hint: you will need to do it in two steps.)\n       \n    a) Compute the number of levels for every factor in a data frame.\n\n5.  The following code simulates the performance of a t-test for non-normal \n    data. Extract the p-value from each test, then visualise.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    trials <- map(1:100, ~ t.test(rpois(10, 10), rpois(7, 10)))\n    ```\n    :::\n\n\n6.  Use `map()` to fit linear models to the `mtcars` dataset using the formulas\n    stored in this list:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    data(mtcars)\n    formulas <- list(\n      mpg ~ disp,\n      mpg ~ I(1 / disp),\n      mpg ~ disp + wt,\n      mpg ~ I(1 / disp) + wt\n    )\n    ```\n    :::\n\n\n7.  Fit the model `mpg ~ disp` to each of the bootstrap replicates of `mtcars` \n    in the list below, then extract the $R^2$ of the model fit (Hint: you can\n    compute the $R^2$ with `summary()`.)\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    bootstrap <- function(df) {\n      df[sample(nrow(df), replace = TRUE), , drop = FALSE]\n    }\n    \n    bootstraps <- map(1:10, ~ bootstrap(mtcars))\n    ```\n    :::\n\n8. How does `purrr` make it easier to perform repeated transformations compared to base R? What are some use cases where conditional transformations like `map_if()` could be helpful in real-world data?\n\n\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "220752cb8664ecdaaaf7b9840985878b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to the command-line\"\nauthor: \n  - name: Stephanie Hicks\n    url: https://stephaniehicks.com\n    affiliation: Department of Biostatistics, Johns Hopkins\n    affiliation_url: https://publichealth.jhu.edu\ndescription: \"Introduction to the command-line\"\ndate: 2025-10-28\nengine: knitr\ndraft: true\n---\n\n\n# Announcements\n\nThe next lecture falls right before üëª Halloween ! \nI plan to give the lecture dressed up in a costume. \nThis is entirely optional, but I encourage students to come in costume if you wish! \n**Candy üç¨ will be offered to anyone in costume!** \n\n\n# Pre-lecture activities\n\n::: callout-important\n\nIn advance of class, please follow the instructions on [Software Carpentry: The Unix Shell](https://swcarpentry.github.io/shell-novice) to \n\n1. Install a Unix shell on your computer (if it is not already installed)\n2. How to access and open the Unix shell on your computer\n3. How to type commands on the Unix shell\n\n:::\n\nIn addition, please read through Chapters 1-7\n\n- <https://swcarpentry.github.io/shell-novice/01-intro>\n- <https://swcarpentry.github.io/shell-novice/02-filedir>\n- <https://swcarpentry.github.io/shell-novice/03-create>\n- <https://swcarpentry.github.io/shell-novice/04-pipefilter>\n- <https://swcarpentry.github.io/shell-novice/05-loop>\n- <https://swcarpentry.github.io/shell-novice/06-script>\n- <https://swcarpentry.github.io/shell-novice/07-find>\n\n\n::: callout-note\n\n## How much should I prepare for before class? \n\nYou should be comfortable with the meaning of most the commands and also executing commands in a Unix shell on your computer before class starts. \n\nDuring class, I will give an overview of working in the Unix shell and then we will practice the commands with an in-class activity. If you have not opened a Unix shell before or you are not comfortable with executing commands, it will be challenging to participate in the activity.\n\n:::\n\n\n\n# Lecture \n\n## Acknowledgements\n\nMaterial for this lecture was borrowed and adopted from\n\n- [Software Carpentry: The Unix Shell](https://swcarpentry.github.io/shell-novice)\n- [Data Science at the Command line](https://datascienceatthecommandline.com/2e)\n- [Applied Computational Genomics](https://github.com/quinlan-lab/applied-computational-genomics)\n\n## Learning objectives\n\n::: callout-note\n### Learning objectives\n\n**At the end of this lesson you will:**\n\n-   Understand what is a command shell and why would use one.\n-   Create, copy, move, rename, and delete files and folders.\n-   Search for regular expressions in files.\n-   Execute R commands and scripts in the command line.\n-   Redirect a command‚Äôs output to a file with redirect operators (`>`, `>>`).\n-   Construct command pipelines with two or more stages with the pipe operator (`|`).\n-   Write a loop that applies one or more commands separately to each file in a set of files.\n-   Conda environments\n\n:::\n\n:::{.callout-tip}\n\nYou can practice your command-line skills with the [Command Challenge](https://cmdchallenge.com/)\n\n:::\n\n## Slides \n\n- [Lecture 01: Introduction to the command-line](https://docs.google.com/presentation/d/1SSx6P4t_N66GIiB316PjBWrmKtTkwYLRVRMs44iCBhU/edit?usp=sharing)\n\n# Class activity \n\n\n::: callout-note\n### Objectives of the activity\n\nFor our in-class activity today, we will \n\n- Practice writing commands in the Unix shell\n- Enjoy a little fun with Taylor Swift lyrics\n\n:::\n\nFind a partner and work on the following tasks. It's unlikely you will finish all of them, but try to do as many as you can! Also, try to work out the solution for yourselves first and then check the solution afterwards. \n\n- Create Taylor Swift‚Äôs Albums Directory. Navigate to your home directory. Create a directory called `taylor_swift_discography`. Inside `taylor_swift_discography`, create subdirectories for each of her albums: `fearless`, `red`, `1989`, `reputation`, and `lover`.\n\n::: {.callout-tip collapse=\"true\"}\n### Solution\n\nExpected commands: `cd`, `mkdir`\n\n:::\n\n- List all the album directories in `taylor_swift_discography` in a long format, showing permissions and modification dates.\n\n::: {.callout-tip collapse=\"true\"}\n### Solution\n\n`ls -l`\n\n:::\n\n- Navigate to the `red` directory and create a file called `all_too_well.txt`.\nAdd the first few lines of the song \"All Too Well\" to the file using a single Unix command.\n\n::: {.callout-tip collapse=\"true\"}\n### Solution\n\nA combo of `touch`, `echo`, `cat`\n\n:::\n\n- Display the contents of `all_too_well.txt` without opening the file in a text editor.\n\n::: {.callout-tip collapse=\"true\"}\n### Solution\n\nExpected commands: `cat`, `more`, `less`\n\n:::\n\n- Navigate to the `1989` directory. Create a file called `blank_space.txt` and add some of the lyrics.\nCount how many words are in the song lyrics using a Unix command.\n\n::: {.callout-tip collapse=\"true\"}\n### Solution\n\nExpected commands: `wc`\n\n:::\n\n- In the `reputation` directory, create a file called `delicate.txt` and add some of the lyrics.\nUse a command to find all occurrences of the word \"delicate\" in the file.\n\n::: {.callout-tip collapse=\"true\"}\n### Solution\n\nExpected commands: `grep`\n\n:::\n\n- Move the file `all_too_well.txt` from the `red` directory to a new directory called `favorites` within `taylor_swift_discography`. Copy `blank_space.txt` from `1989` to the `favorites` directory.\n\n::: {.callout-tip collapse=\"true\"}\n### Solution\n\nExpected commands: `mv`, `cp`\n\n:::\n\n- Navigate to the `favorites` directory and compress both `all_too_well.txt` and `blank_space.txt` into a file called `favorite_lyrics.tar.gz`.\n\n::: {.callout-tip collapse=\"true\"}\n### Solution\n\nExpected commands: `tar`, `gzip`\n\n:::\n\n- Uncompress the `favorite_lyrics.tar.gz` file and verify that the files have been restored correctly.\n\n::: {.callout-tip collapse=\"true\"}\n### Solution\n\nExpected commands: `tar`, `gunzip`\n\n:::\n\n\n- In the `taylor_swift_discography` directory, find all the lines (representing song lyrics) that contain the word ‚Äúlove‚Äù. Output the results to a file called `love_songs.txt` in the `favorites` directory.\n\n::: {.callout-tip collapse=\"true\"}\n### Solution\n\n`grep -r \"love\" >> favorites/love_songs.txt`\n\n:::\n\n- For each song in `favorites`, write a `for` loop to print to the screen the first two lines of each song in the files `all_too_well.txt` and `blank_space.txt`. \n\n::: {.callout-tip collapse=\"true\"}\n### Solution\n\nfor <add here> in <add here>\ndo\n    <add here>\ndone \n\n:::\n\n\n- Create a shell script called `top_favorites.sh` and place the `for` loop in the shell script. Run the shell script. \n\n::: {.callout-tip collapse=\"true\"}\n### Solution\n\nExpected comments: `touch`\n\n:::\n\n- In the `taylor_swift_discography` directory, create a file called `song_metadata.csv` that contains columns for album name, song title, duration (in minutes), and year with the following information. \n\n```\nAlbum,Song Title,Duration,Year\nFearless,Love Story,3.55,2008\nRed,All Too Well,5.29,2012\n1989,Blank Space,3.51,2014\nReputation,Delicate,3.52,2017\nLover,You Need to Calm Down,2.51,2019\nFolklore,Cardigan,4.00,2020\nEvermore,Willow,3.34,2020\nMidnights,Anti-Hero,3.21,2022\n```\n\nUse `awk` to extract and display only the song titles and durations from this file.\n\n::: {.callout-tip collapse=\"true\"}\n### Solution\n\n`awk -F, '{print $2, $3}' song_metadata.csv`\n\n:::\n\n# Post-lecture\n\n## Summary \n\n- Shell is a text based application for viewing, handling and manipulating files\n- It is also known by the following names\n    - CLI (Command Line Interface)\n    - Terminal\n    - Bash (Bourne Again Shell)\n- Use `Rscript -e` or `R -e` to execute R scripts from the command line\n- RStudio includes a Terminal (from version 1.1.383)\n- Execute commands from shell script in RStudio using Ctrl + Enter\n- RMarkdown and Quarto supports bash, sh and awk\n\n## Additional practice\n\nHere are some additional practice questions to help you think about the material discussed.\n\n::: callout-note\n### Questions\n\n1. Move around the computer, get used to moving in and out of directories, see how different file types appear in the Unix shell. Be sure to use the `pwd` and `cd` commands, and the different flags for the `ls` commands. \n2. Practice using \"Tab for Auto-complete\" in the shell to autocomplete commands or file names.\n3. Explore the manual pages of `date` in the command line to show you what that looks like. Try to figure out what is the argument to print the date since the Unix epoch or 00:00:00 UTC on 1 January 1970 as a function of the number of seconds. Then try to identify what is the argument to display the date in UTC.\n4. Practice your command line knowledge with [Command Challenge](https://cmdchallenge.com/).\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
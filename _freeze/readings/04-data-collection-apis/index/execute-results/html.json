{
  "hash": "b95deeccb1ea1e3770092886d561b6f6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Retrieving data from APIs with `httr2`\"\nauthor: \n  - name: Stephanie Hicks\n    url: https://www.stephaniehicks.com\n    affiliation: Department of Biostatistics, Johns Hopkins\n    affiliation_url: https://publichealth.jhu.edu\ndescription: \"Introduction to JSON files and interacting with APIs with `httr2`\"\ndate: 2025-11-06\ndraft: true\n---\n\nBefore we begin, let's load a few R packages\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(jsonlite)\nlibrary(httr2)\n```\n:::\n\n\n\n# Motivation\n\nToday, we are going to talk about getting data from APIs and\nexamples of common data formats. \n\nFirst, let's have a bit of a philosophical discussion about data. \n\n## \"Raw\" vs \"Clean\" data\n\nAs data analysts, this is what we wished data \nlooked like whenever we start a project\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://github.com/jtleek/advdatasci/raw/master/imgs/tidy-data-example.png)\n:::\n:::\n\n\nHowever, the reality, is data is rarely in that \nform in comes in all types of _\"raw\"_ formats that \nneed to be transformed into a _\"clean\"_ format. \n\nFor example, in field of genomics, raw data \nlooks like something like this: \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://github.com/jtleek/advdatasci/raw/master/imgs/fastq.png)\n:::\n:::\n\n\nOr if you are interested in analyzing data from \nTwitter: \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://github.com/jtleek/advdatasci/raw/master/imgs/twitter-api.png)\n:::\n:::\n\n\nOr data from Electronic Healthcare Records (EHRs): \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://github.com/jtleek/advdatasci/raw/master/imgs/ehr.png)\n:::\n:::\n\n\nWe all have our scary spreadsheet tales. Here is \nJenny Bryan from Posit and UBC actually asking \nfor some of those spreadsheet tales on twitter. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://github.com/jtleek/advdatasci/raw/master/imgs/spreadsheet-tales.png)\n:::\n:::\n\n\nFor example, this is an actual \n[spreadsheet from Enron in 2001](https://github.com/jennybc/2016-06_spreadsheets/blob/master/2016-06_useR-stanford.pdf): \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://github.com/jtleek/advdatasci/raw/master/imgs/enron-spreadsheet.png)\n:::\n:::\n\n\n## What do we mean by \"raw\" data? \n\nFrom [https://simplystatistics.org/posts/2016-07-20-relativity-raw-data/](https://simplystatistics.org/posts/2016-07-20-relativity-raw-data/)\nraw data is defined as data... \n\n> ...if you have done no processing, manipulation, coding, or analysis of the data. In other words, the file you received from the person before you is untouched. But it may not be the rawest version of the data. The person who gave you the raw data may have done some computations. They have a different \"raw data set\".\n\n## Where do data live? \n\nData lives anywhere and everywhere. Data \nmight be stored simply in a `.csv` or `.txt`\nfile. Data might be stored in an Excel or \nGoogle Spreadsheet. Data might be stored in \nlarge databases that require users to write \nspecial functions to interact with to extract \nthe data they are interested in. \n\nFor example, you may have heard of the terms \n`mySQL` or `MongoDB`. \n\nFrom [Wikipedia, MySQL](https://en.wikipedia.org/wiki/MySQL) \nis defined as _an open-source relational database management system (RDBMS). Its name is a combination of \"My\", the name of co-founder Michael Widenius's daughter,[7] and \"SQL\", the abbreviation for Structured Query Language_. \n\nFrom [Wikipeda, MongoDB](https://en.wikipedia.org/wiki/MongoDB)\nis defined as _\"a free and open-source cross-platform document-oriented database program. Classified as a NoSQL database program, MongoDB uses JSON-like documents with schemata.\"_\n\nSo after reading that, we get the sense that there\nare multiple ways large databases can be structured, \ndata can be formatted and interacted with. \nIn addition, we see that database programs \n(e.g. MySQL and MongoDB) can also interact \nwith each other.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://github.com/jtleek/advdatasci/raw/master/imgs/databases.png)\n:::\n:::\n\n\nWe will learn more about `JSON` today and learn about `SQL` in a later lecture more formally. \n\n# Best practices on sharing data\n\nA great article in PeerJ was written \ntitled [_How to share data for collaboration_](https://peerj.com/preprints/3139v5.pdf), \nin which the authors describe a set of guidelines\nfor sharing data:\n\n> We highlight the need to provide raw data to the statistician, the importance of consistent formatting, and the necessity of including all essential experimental information and pre-processing steps carried out to the statistician. With these guidelines we hope to avoid errors and delays in data analysis. the importance of consistent formatting, and the necessity of including all essential experimental information and pre-processing steps carried out to the statistician.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://github.com/jtleek/advdatasci/raw/master/imgs/ellis-datashare.png)\n:::\n:::\n\n\nIt's a great paper that describes the information \nyou should pass to a statistician to facilitate \nthe most efficient and timely analysis. \n\nSpecifically:\n\n1. The raw data (or the rawest form of the data to which you have access)\n    * Should not have modified, removed or summarized any data; Ran no software on data\n    * e.g. strange binary file your measurement machine spits out\n    * e.g. complicated JSON file you scrapped from Twitter Application Programming Interfaces (API)\n    * e.g. hand-entered numbers you collected looking through a microscope\n\n2. A clean data set\n    * This may or may not be transforming data into a `tidy` dataset, but possibly yes\n\n3. A code book describing each variable and its values in the clean or tidy data set.\n    * More detailed information about the measurements in the data set (e.g. units, experimental design, summary choices made)\n    * Doesn't quite fit into the column names in the spreadsheet\n    * Often reported in a `.md`, `.txt` or Word file. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://github.com/jtleek/advdatasci/raw/master/imgs/code-book.png)\n:::\n:::\n\n\n4. An explicit and exact recipe you used to go from 1 -> 2,3\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://github.com/jtleek/advdatasci/raw/master/imgs/recipe-best.png)\n:::\n:::\n\n\n# Getting data\n\n## JSON files \n\nJSON (or JavaScript Object Notation) is a file\nformat that stores information in human-readable, \norganized, logical, easy-to-access manner.\n\nFor example, here is what a JSON file looks \nlike: \n\n``` md\nvar stephanie = {\n\t\"job-title\" : \"Associate Professor\",\n\t\"hometown\" : \"Baltimore, MD\",\n\t\"pronouns\": \"she/her\",\n  \"states-lived\" : {\n    \"state1\" : \"Louisiana\",\n    \"state2\" : \"Texas\",\n    \"state3\" : \"Massachusetts\",\n    \"state4\" : \"Maryland\"\n  }\n}\n```\n\nSome features about `JSON` objects: \n\n* JSON objects are surrounded by curly braces `{}`\n* JSON objects are written in key/value pairs\n* Keys must be strings, and values must be a valid JSON data type (string, number, object, array, boolean)\n* Keys and values are separated by a colon\n* Each key/value pair is separated by a comma\n\n\n\n## Overview of APIs\n\n[From AWS](https://aws.amazon.com/what-is/api/), API stands for **Application Programming Interface**. \n\n- \"Application\" = any **software** with a distinct function\n- \"Interface\" = a **contract of service** between two applications. This contract defines how the two communicate with each other using requests and responses. \n\nThe **API documentation** contains information on how developers are to structure those requests and responses.\n\n:::{.callout-tip}\n\n### Purpose of APIs\n\nThe purpose of APIs is enable two software components to communicate with each other using a set of definitions and protocols. \n\nFor example, the weather bureau’s software system contains daily weather data. The weather app on your phone \"talks\" to this system via APIs and shows you daily weather updates on your phone.\n\n:::\n\n\n### How do APIs work?\n\nTo understand how APIs work, two terms that are important are \n\n1. **client**. This is the application sending the request.\n2. **server**. This is the application sending the response.\n\nSo in the weather example, the bureau's weather database is the server, and the mobile app is the client. \n\n### Four types of API architectures\n\nThere are four different ways that APIs can work depending on when and why they were created.\n\n1. **SOAP APIs**. These APIs use **Simple Object Access Protocol**. Client and server exchange messages using XML. This is a less flexible API that was more popular in the past.\n\n2. **RPC APIs**. These APIs are called **Remote Procedure Calls**. The client completes a function (or procedure) on the server, and the server sends the output back to the client.\n\n3. **Websocket APIs**. Websocket API is another **modern web** API development that uses JSON objects to pass data. A WebSocket API supports two-way communication between client apps and the server. The server can send callback messages to connected clients, making it more efficient than REST API.\n\n4. **REST APIs**. REST stands for **Representational State Transfer** (and are the most popular and flexible APIs). The client sends requests to the server as data. The server uses this client input to start internal functions and returns output data back to the client. REST defines a set of functions like GET, PUT, DELETE, etc. that clients can use to access server data. Clients and servers exchange data using HTTP.\n\nThe main feature of REST API is **statelessness** (i.e. servers do not save client data between requests). Client requests to the server are similar to URLs you type in your browser to visit a website. The response from the server is plain data, without the typical graphical rendering of a web page.\n\n\n### How to use an API?\n\nThe basic steps to using an API are:\n\n1. **Obtaining an API key**. This is done by creating a verified account with the API provider.\n2. **Set up an HTTP API client**. This tool allows you to structure API requests easily using the API keys received. Here, we will use functions from the `httr2` package (which is the next generation of the `httr` package). \n3. If you don’t have an API client, you can try to structure the request yourself in your browser by referring to the API documentation.\n4. Once you are comfortable with the new API syntax, you can start using it in your code.\n\n\n### Where can I find new APIs?\n\nNew web APIs can be found on API marketplaces and API directories, such as:\n\n- [Rapid API](https://rapidapi.com/) – One of the largest global API markets (10k+ public APIs). Users to test APIs directly on the platform before committing to purchase.\n- [Public REST APIs](https://www.postman.com/cs-demo/public-rest-apis/collection/tfzpqfc/public-rest-apis) – Groups REST APIs into categories, making it easier to browse and find the right one to meet your needs.\n- [APIForThat](https://apiforthat.posthaven.com/) and [APIList](https://apilist.fun) – Both these websites have lists of 500+ web APIs, along with in-depth information on how to use them.    \n\n\n# GitHub API\n\nThe [GitHub REST API](https://docs.github.com/en/rest) may be of interest when studying online communities, working methods, organizational structures, communication and discussions, etc. with a focus on (open-source) software development. \n\nMany projects that are hosted on GitHub are open-source projects with a transparent development process and communications. For private projects, which can also be hosted on GitHub, there’s understandably only a few aggregate data available.\n\nLet's say we want to use the [GitHub REST API](https://docs.github.com/en/rest) to find out how many of my GitHub repositories have open issues? \n\n:::{.callout-tip}\n\n### Pro-tip\n\nThe API can be used for free and you can send up to 60 requests per hour if you are not authenticated (i.e. if you don’t provide an API key). \n\nFor serious data collection, this is not much, so it is recommended to sign up on GitHub and generate a personal access token that acts as API key. \n\nThis token can then be used to authenticate your API requests. Your quota is then 5000 requests per hour.\n\n:::\n\n## Access the API from R\n\nThere are packages for many programming languages that provide convenient access for communicating with the GitHub API, but there are no such packages (that I'm aware of) for accessing the API from R.  \n\nThis means we can only access the API directly, e.g. by using the [`jsonlite`](https://cran.r-project.org/web/packages/jsonlite/index.html) package to fetch the data and convert it to an R `list` or `data.frame`.\n\nSpecifically, we will use the `jsonlite::read_json()` function\nto read a JSON file into a data frame. \n\nThe JSON file is located at <https://api.github.com/users/stephaniehicks/repos>. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngithub_url <- \"https://api.github.com/users/stephaniehicks/repos\"\n\nlibrary(jsonlite)\nlibrary(tidyverse)\njsonData <- read_json(github_url, simplifyVector = TRUE)\nglimpse(jsonData)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 30\nColumns: 79\n$ id                          <int> 160194123, 132884754, 647539937, 225501707…\n$ node_id                     <chr> \"MDEwOlJlcG9zaXRvcnkxNjAxOTQxMjM=\", \"MDEwO…\n$ name                        <chr> \"2018-bioinfosummer-scrnaseq\", \"advdatasci…\n$ full_name                   <chr> \"stephaniehicks/2018-bioinfosummer-scrnase…\n$ private                     <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, …\n$ owner                       <df[,19]> <data.frame[26 x 19]>\n$ html_url                    <chr> \"https://github.com/stephaniehicks/201…\n$ description                 <chr> NA, NA, \"Repo to share code for the atlas-…\n$ fork                        <lgl> FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, FAL…\n$ url                         <chr> \"https://api.github.com/repos/stephaniehic…\n$ forks_url                   <chr> \"https://api.github.com/repos/stephaniehic…\n$ keys_url                    <chr> \"https://api.github.com/repos/stephaniehic…\n$ collaborators_url           <chr> \"https://api.github.com/repos/stephaniehic…\n$ teams_url                   <chr> \"https://api.github.com/repos/stephaniehic…\n$ hooks_url                   <chr> \"https://api.github.com/repos/stephaniehic…\n$ issue_events_url            <chr> \"https://api.github.com/repos/stephaniehic…\n$ events_url                  <chr> \"https://api.github.com/repos/stephaniehic…\n$ assignees_url               <chr> \"https://api.github.com/repos/stephaniehic…\n$ branches_url                <chr> \"https://api.github.com/repos/stephaniehic…\n$ tags_url                    <chr> \"https://api.github.com/repos/stephaniehic…\n$ blobs_url                   <chr> \"https://api.github.com/repos/stephaniehic…\n$ git_tags_url                <chr> \"https://api.github.com/repos/stephaniehic…\n$ git_refs_url                <chr> \"https://api.github.com/repos/stephaniehic…\n$ trees_url                   <chr> \"https://api.github.com/repos/stephaniehic…\n$ statuses_url                <chr> \"https://api.github.com/repos/stephaniehic…\n$ languages_url               <chr> \"https://api.github.com/repos/stephaniehic…\n$ stargazers_url              <chr> \"https://api.github.com/repos/stephaniehic…\n$ contributors_url            <chr> \"https://api.github.com/repos/stephaniehic…\n$ subscribers_url             <chr> \"https://api.github.com/repos/stephaniehic…\n$ subscription_url            <chr> \"https://api.github.com/repos/stephaniehic…\n$ commits_url                 <chr> \"https://api.github.com/repos/stephaniehic…\n$ git_commits_url             <chr> \"https://api.github.com/repos/stephaniehic…\n$ comments_url                <chr> \"https://api.github.com/repos/stephaniehic…\n$ issue_comment_url           <chr> \"https://api.github.com/repos/stephaniehic…\n$ contents_url                <chr> \"https://api.github.com/repos/stephaniehic…\n$ compare_url                 <chr> \"https://api.github.com/repos/stephaniehic…\n$ merges_url                  <chr> \"https://api.github.com/repos/stephaniehic…\n$ archive_url                 <chr> \"https://api.github.com/repos/stephaniehic…\n$ downloads_url               <chr> \"https://api.github.com/repos/stephaniehic…\n$ issues_url                  <chr> \"https://api.github.com/repos/stephaniehic…\n$ pulls_url                   <chr> \"https://api.github.com/repos/stephaniehic…\n$ milestones_url              <chr> \"https://api.github.com/repos/stephaniehic…\n$ notifications_url           <chr> \"https://api.github.com/repos/stephaniehic…\n$ labels_url                  <chr> \"https://api.github.com/repos/stephaniehic…\n$ releases_url                <chr> \"https://api.github.com/repos/stephaniehic…\n$ deployments_url             <chr> \"https://api.github.com/repos/stephaniehic…\n$ created_at                  <chr> \"2018-12-03T13:20:45Z\", \"2018-05-10T10:22:…\n$ updated_at                  <chr> \"2019-08-08T02:18:17Z\", \"2018-05-10T10:22:…\n$ pushed_at                   <chr> \"2018-12-05T17:07:09Z\", \"2017-12-18T17:18:…\n$ git_url                     <chr> \"git://github.com/stephaniehicks/2018-bioi…\n$ ssh_url                     <chr> \"git@github.com:stephaniehicks/2018-bioinf…\n$ clone_url                   <chr> \"https://github.com/stephaniehicks/2018-bi…\n$ svn_url                     <chr> \"https://github.com/stephaniehicks/2018-bi…\n$ homepage                    <chr> NA, NA, NA, NA, NA, \"\", NA, NA, NA, NA, NA…\n$ size                        <int> 60296, 172353, 8866, 121, 675, 26688, 20, …\n$ stargazers_count            <int> 4, 0, 2, 1, 0, 0, 1, 8, 0, 1, 0, 15, 3, 0,…\n$ watchers_count              <int> 4, 0, 2, 1, 0, 0, 1, 8, 0, 1, 0, 15, 3, 0,…\n$ language                    <chr> \"TeX\", \"HTML\", \"R\", NA, NA, \"R\", \"R\", \"Jup…\n$ has_issues                  <lgl> TRUE, FALSE, TRUE, FALSE, FALSE, TRUE, TRU…\n$ has_projects                <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, …\n$ has_downloads               <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, …\n$ has_wiki                    <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, …\n$ has_pages                   <lgl> TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, F…\n$ has_discussions             <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, …\n$ forks_count                 <int> 4, 0, 1, 0, 1, 0, 0, 2, 0, 0, 0, 4, 1, 1, …\n$ mirror_url                  <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ archived                    <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, …\n$ disabled                    <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, …\n$ open_issues_count           <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, …\n$ license                     <df[,5]> <data.frame[26 x 5]>\n$ allow_forking               <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, …\n$ is_template                 <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALS…\n$ web_commit_signoff_required <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, …\n$ topics                      <list> <>, <>, <>, <>, <>, <>, <>, <>, <>, <>, <>…\n$ visibility                  <chr> \"public\", \"public\", \"public\", \"public\", \"p…\n$ forks                       <int> 4, 0, 1, 0, 1, 0, 0, 2, 0, 0, 0, 4, 1, 1,…\n$ open_issues                 <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, …\n$ watchers                    <int> 4, 0, 2, 1, 0, 0, 1, 8, 0, 1, 0, 15, 3, 0,…\n$ default_branch              <chr> \"master\", \"master\", \"main\", \"master\", \"mas…\n```\n\n\n:::\n:::\n\n\nWe see this has returned a data frame with the argument `simplifyVector` which converts the output from a list to a dataframe. \n\nHowever, from here, we see that there are only 30 rows (or 30 repositories). \nIf you look on my github page, you can see there are more than 30 repositories. \n\n- <https://github.com/stephaniehicks?tab=repositories> \n\n\n:::{.callout-tip}\n\n### APIs limit info from users\n\nWhat's happening is called **pagination**. \n\nAt a high-level, the API is limiting the amount of items a user gets and **splitting it into pages**.\n\nFormally, pagination is the process of splitting the contents or a section of a website into discrete pages. Users tend to get lost when there's bunch of data and with pagination splitting they can concentrate on a particular amount of content. Hierarchy and paginated structure improve the readability score of the content.\n\nIn this use case Github api splits the result into 30 items per resonse, depends on the request\n\n:::\n\n\n\n**Solution**: You should explicitly specify in your request how many items you would like to receive from server pagination engine, using formula for Github pagination api: \n\n`?page=1&per_page=<numberOfItemsYouSpecify>\"`\n\nYou can read more about pagination here: \n\n- <https://docs.github.com/en/rest/guides/using-pagination-in-the-rest-api>\n\n\n\n:::{.callout-tip}\n\n### Example\n\nHere we can visit this website: \n\n- <https://api.github.com/users/stephaniehicks/repos?page=1&per_page=1000> \n\nAnd see there are more than 30 repos. Let's read it into R. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngithub_url = \"https://api.github.com/users/stephaniehicks/repos?page=1&per_page=1000\"\n\njsonDataAll <- read_json(github_url, simplifyVector = TRUE)\ndim(jsonDataAll)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 92 79\n```\n\n\n:::\n:::\n\n\nWe now get all the public repositories! yay! \n\n:::\n\n\n## Access APIs with `httr2`\n\nThere are a set of [basic HTTP verbs](https://docs.oracle.com/en/cloud/saas/marketing/eloqua-develop/Developers/GettingStarted/APIRequests/HTTP-verbs.htm) that allow you access a set of **endpoints**. \n\nThe basic request patterns are:\n\n- Retrieve a single item (GET)\n- Retrieve a list of items (GET)\n- Create an item (POST)\n- Update an item (PUT)\n- Delete an item (DELETE)\n\n### Example: GitHub commits\n\nLet’s say you want to retrieve information about the latest commits from a GitHub repository. We will use `httr2` to make a request to the GitHub API for a repository of your choice. Later on we will make this an **authenticated HTTP response** to the GitHub API. \n\nFirst, we make sure we have the `httr2` package installed and loaded. We'll also need `jsonlite` package for handling JSON files and `dplyr` for data wrangling. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr2)\nlibrary(jsonlite)\nlibrary(dplyr)\n```\n:::\n\n\nNow we will set up our **request** to the GitHub API. The GitHub API endpoint for getting the latest commits in a repository is at `https://api.github.com/repos/{owner}/{repo}/commits`. \n\nFor this example, we’ll look at the latest commits for the tidyverse/dplyr repository. We will use `httr2::request()` function to set up the request, (and later on we will add authentication -- optional, but recommended for higher rate limits), and parse the response.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nowner <- \"tidyverse\"\nrepo <- \"dplyr\"\nurl <- paste0(\"https://api.github.com/repos/\", owner, \"/\", repo, \"/commits\")\n\n\nresponse <- request(url) %>%\n  req_perform()\nresponse\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<httr2_response>\nGET https://api.github.com/repos/tidyverse/dplyr/commits\nStatus: 200 OK\nContent-Type: application/json\nBody: In memory (143835 bytes)\n```\n\n\n:::\n:::\n\n\nNext, we can see if the response was successful. \n\n::: {.cell}\n\n```{.r .cell-code}\n# Check if the response was successful\nif (resp_status(response) == 200) {\n  # Parse JSON response into an R list\n  commits <- resp_body_json(response, simplifyVector = TRUE)\n  \n  # View the first few rows of the commits data\n  head(commits)\n} else {\n  message(\"Failed to retrieve data. Status code: \", resp_status(response))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                       sha\n1 2f9a846ab65b7e192d3e7196e968e6f7d0a94289\n2 0c20aa37291450f97ae62fc8b14859e8e3021bbb\n3 ef1498e0df9eff6ff92088509160ad258d8fb4c4\n4 c0aebf05b0454c4b7021515a53d254cfc6d1e3a5\n5 746eb872b275e6632c6135243f9748affc28816c\n6 ea319ec1f48f20c5ec4de6ea36cd7b2729dbbea2\n                                                                node_id\n1 C_kwDOAGIUpdoAKDJmOWE4NDZhYjY1YjdlMTkyZDNlNzE5NmU5NjhlNmY3ZDBhOTQyODk\n2 C_kwDOAGIUpdoAKDBjMjBhYTM3MjkxNDUwZjk3YWU2MmZjOGIxNDg1OWU4ZTMwMjFiYmI\n3 C_kwDOAGIUpdoAKGVmMTQ5OGUwZGY5ZWZmNmZmOTIwODg1MDkxNjBhZDI1OGQ4ZmI0YzQ\n4 C_kwDOAGIUpdoAKGMwYWViZjA1YjA0NTRjNGI3MDIxNTE1YTUzZDI1NGNmYzZkMWUzYTU\n5 C_kwDOAGIUpdoAKDc0NmViODcyYjI3NWU2NjMyYzYxMzUyNDNmOTc0OGFmZmMyODgxNmM\n6 C_kwDOAGIUpdoAKGVhMzE5ZWMxZjQ4ZjIwYzVlYzRkZTZlYTM2Y2Q3YjI3MjlkYmJlYTI\n  commit.author.name commit.author.email   commit.author.date\n1      Davis Vaughan      davis@posit.co 2025-10-02T20:02:50Z\n2      Davis Vaughan      davis@posit.co 2025-10-02T20:01:20Z\n3      Davis Vaughan   davis@rstudio.com 2025-10-02T19:38:49Z\n4      Davis Vaughan   davis@rstudio.com 2025-10-02T18:02:09Z\n5      Davis Vaughan      davis@posit.co 2025-10-02T17:33:41Z\n6      Davis Vaughan      davis@posit.co 2025-10-02T17:28:59Z\n  commit.committer.name commit.committer.email commit.committer.date\n1         Davis Vaughan         davis@posit.co  2025-10-02T20:02:50Z\n2         Davis Vaughan         davis@posit.co  2025-10-02T20:01:20Z\n3                GitHub     noreply@github.com  2025-10-02T19:38:49Z\n4                GitHub     noreply@github.com  2025-10-02T18:02:09Z\n5         Davis Vaughan         davis@posit.co  2025-10-02T17:33:41Z\n6         Davis Vaughan         davis@posit.co  2025-10-02T17:28:59Z\n                                                                                                                                                                                                                                     commit.message\n1                                                                                                                                                                                                                    Going in circles with roxygen2\n2                                                                                                                                                                                                                       Document with CRAN roxygen2\n3 Rework `case_when()` on top of `vctrs::vec_case_when()` (#7727)\\n\\n* Rework `case_when()` on top of `vctrs::vec_case_when()`\\n\\n* NEWS\\n\\n* Bring over a few tests from `vec_case_when()`\\n\\n* Switch from `cases` to `conditions` to match vctrs\n4                                                                                                                                                                                     Rework `vec_case_match()` on `vctrs::vec_case_when()` (#7726)\n5                                                                                                                                                                                                     Isolate `case_match()` and `vec_case_match()`\n6                                                                                                                                                                                                      Update snapshot test with latest vctrs/rlang\n                           commit.tree.sha\n1 ac8aa083c0bf3aac9c6a0dda28c58e9e3ff87db9\n2 a3f2d2bbb5c8c012ddc99fe48dd3bd2188d665c9\n3 ac8aa083c0bf3aac9c6a0dda28c58e9e3ff87db9\n4 979e248a41581ed8f9097aa80d633f4de8e0642d\n5 c0ea2fdf647b588ef053d14faca576916651a4c9\n6 291a3823c628402f9fa6d7992aadcece048284dd\n                                                                                  commit.tree.url\n1 https://api.github.com/repos/tidyverse/dplyr/git/trees/ac8aa083c0bf3aac9c6a0dda28c58e9e3ff87db9\n2 https://api.github.com/repos/tidyverse/dplyr/git/trees/a3f2d2bbb5c8c012ddc99fe48dd3bd2188d665c9\n3 https://api.github.com/repos/tidyverse/dplyr/git/trees/ac8aa083c0bf3aac9c6a0dda28c58e9e3ff87db9\n4 https://api.github.com/repos/tidyverse/dplyr/git/trees/979e248a41581ed8f9097aa80d633f4de8e0642d\n5 https://api.github.com/repos/tidyverse/dplyr/git/trees/c0ea2fdf647b588ef053d14faca576916651a4c9\n6 https://api.github.com/repos/tidyverse/dplyr/git/trees/291a3823c628402f9fa6d7992aadcece048284dd\n                                                                                         commit.url\n1 https://api.github.com/repos/tidyverse/dplyr/git/commits/2f9a846ab65b7e192d3e7196e968e6f7d0a94289\n2 https://api.github.com/repos/tidyverse/dplyr/git/commits/0c20aa37291450f97ae62fc8b14859e8e3021bbb\n3 https://api.github.com/repos/tidyverse/dplyr/git/commits/ef1498e0df9eff6ff92088509160ad258d8fb4c4\n4 https://api.github.com/repos/tidyverse/dplyr/git/commits/c0aebf05b0454c4b7021515a53d254cfc6d1e3a5\n5 https://api.github.com/repos/tidyverse/dplyr/git/commits/746eb872b275e6632c6135243f9748affc28816c\n6 https://api.github.com/repos/tidyverse/dplyr/git/commits/ea319ec1f48f20c5ec4de6ea36cd7b2729dbbea2\n  commit.comment_count commit.verification.verified commit.verification.reason\n1                    0                        FALSE                   unsigned\n2                    0                        FALSE                   unsigned\n3                    0                         TRUE                      valid\n4                    0                         TRUE                      valid\n5                    0                        FALSE                   unsigned\n6                    0                        FALSE                   unsigned\ncommit.verification.signature\nnn3 -----BEGIN PGP SIGNATURE-----\\n\\nwsFcBAABCAAQBQJo3tTJCRC1aQ7uu5UhlAAABGoQADSgScK9Z6SEtgks6XKR4bSj\\nZliA9mPr4cr4uRgOVlqRrzvXDdkKNJ8D0s2wLVlGMsSVuQ3CSdlPppN3yr1JXAZk\\n2kFCyz5xBPb+akdOOuZ79yZeQO/y3f7hp2ozxHYI30ifSspdJEQVIjKIDH/AkGay\\nN4H2JLdZtXyZAYz8+fT9fYDOd5aqmM6MP5Y50nDN+LSWjhcIkRuKS6a4OMYbZGMN\\nHeRTSjO6kH2BAQNcdP73jAW7XcVSfSqHqAxZEWa3aim3VYtalefn+Q1nMGiIg48n\\naGTBU5Qac6JOuyzywlxkqs2fV9UTLX8AcdJa2iOGlmGodrN0ciYv8GbSrJBJgw9o\\nRdUv/rfJVjB4st2SOrKh2e0jxTO2RGvm/bS1GPWOz/hjltELdJMMs+qVVG324qiX\\n18dqm0NI48Wbxv/HU11mEsgzuHMdGvgZU0Ifpq5zx69LEzT/sB20d2wYpzkfUfdf\\nbM4Do1pWV7/NIX0p5BOY3Ghh9c3/e3zSwJVkvtAlhGSR7dDPgg7/aYRJediN2CGm\\nwih4I2MM5WOsQ6xV703k3DeostgUaf7Q1nMH7YrrFepJIgjoMnpO3XZ3jkIEnDx0\\nShH01d/5QkH01snzfxjhADB98KIV2s7FfuWtuvDyyYYykRn3LehB/3XuStVBORcc\\nrXF6EBWhxdCPQqweX+3I\\n=NDTE\\n-----END PGP SIGNATURE-----\\n\n4 -----BEGIN PGP SIGNATURE-----\\n\\nwsFcBAABCAAQBQJo3r4hCRC1aQ7uu5UhlAAApAoQAIII5sZS0Sv2WpnmkSJVRygz\\ndbvILASc0EJAQj9UI0skNqXAvlLDnOFHsKaAbowreCw6xBtovdezsJLBVpNFKxy5\\n6JfEWu7ON+mu7fQbDjF4F/v/GRlDC0TkRY5YF2lZIofXcUdXBB/YPO5WcOwPel/j\\ncE/8+rZ7g9CFQVf/DRuOLrwI/cvJANwpOpagRoLUIScQwJSmGsBIsPUXVnJeR2oW\\nmEkSVscVpZgPzaZz4soZlPalXLI+e/9VxscraDi08IhNV0uoyqIdHSYNDCS6Hj9r\\nfwlDZpIngJnIpsnGIzWI4ajGY2fSFDJCsl8vxVFFrMKnFbydxplG2BRkWh65LETT\\noQ8MsnTSa3fSmpbzPXzLP+AU/XbC+IZQZm9nT9x6fXeCrplqJprMsw/BKC37K80X\\n6LBHvqPLyhcDCuSv1x1KBzd4YioTMhKJ0Hm5/y1vINnNBN+slBl9oLEHo23d7bFA\\nYyhvGxLEw6mcI6vJ2ia+c7CJnpl6o4i3ev2OZqH5sk6HQBckOkPgL4vdFf5ylFBF\\nTjXDvWiAH5u3/QYeDVMcQfJ2vDfmhE2Rcmkgg2OkBosLDnkD1sUbsQ7VIdbbqypK\\n7/VvNejMea7hkc99NOz1o/UEH/bCoOaw+RkwTr1mcQyeRLD9Fb1/nWKhsYrmj376\\nf4NIbe8nu9IsO3N2ZdqY\\n=NAdx\\n-----END PGP SIGNATURE-----\\n\nnn                                                                                                                                                                                                                                                                                                                                                                                                                                             commit.verification.payload\n1                                                                                                                                                                                                                                                                                                                                                                                                                                                                   <NA>\n2                                                                                                                                                                                                                                                                                                                                                                                                                                                                   <NA>\n3 tree ac8aa083c0bf3aac9c6a0dda28c58e9e3ff87db9\\nparent c0aebf05b0454c4b7021515a53d254cfc6d1e3a5\\nauthor Davis Vaughan <davis@rstudio.com> 1759433929 -0400\\ncommitter GitHub <noreply@github.com> 1759433929 -0400\\n\\nRework `case_when()` on top of `vctrs::vec_case_when()` (#7727)\\n\\n* Rework `case_when()` on top of `vctrs::vec_case_when()`\\n\\n* NEWS\\n\\n* Bring over a few tests from `vec_case_when()`\\n\\n* Switch from `cases` to `conditions` to match vctrs\n4                                                                                                                                                                                 tree 979e248a41581ed8f9097aa80d633f4de8e0642d\\nparent 746eb872b275e6632c6135243f9748affc28816c\\nauthor Davis Vaughan <davis@rstudio.com> 1759428129 -0400\\ncommitter GitHub <noreply@github.com> 1759428129 -0400\\n\\nRework `vec_case_match()` on `vctrs::vec_case_when()` (#7726)\\n\\n\n5                                                                                                                                                                                                                                                                                                                                                                                                                                                                   <NA>\n6                                                                                                                                                                                                                                                                                                                                                                                                                                                                   <NA>\n  commit.verification.verified_at\n1                            <NA>\n2                            <NA>\n3            2025-10-02T19:38:50Z\n4            2025-10-02T18:02:10Z\n5                            <NA>\n6                            <NA>\n                                                                                            url\n1 https://api.github.com/repos/tidyverse/dplyr/commits/2f9a846ab65b7e192d3e7196e968e6f7d0a94289\n2 https://api.github.com/repos/tidyverse/dplyr/commits/0c20aa37291450f97ae62fc8b14859e8e3021bbb\n3 https://api.github.com/repos/tidyverse/dplyr/commits/ef1498e0df9eff6ff92088509160ad258d8fb4c4\n4 https://api.github.com/repos/tidyverse/dplyr/commits/c0aebf05b0454c4b7021515a53d254cfc6d1e3a5\n5 https://api.github.com/repos/tidyverse/dplyr/commits/746eb872b275e6632c6135243f9748affc28816c\n6 https://api.github.com/repos/tidyverse/dplyr/commits/ea319ec1f48f20c5ec4de6ea36cd7b2729dbbea2\n                                                                            html_url\n1 https://github.com/tidyverse/dplyr/commit/2f9a846ab65b7e192d3e7196e968e6f7d0a94289\n2 https://github.com/tidyverse/dplyr/commit/0c20aa37291450f97ae62fc8b14859e8e3021bbb\n3 https://github.com/tidyverse/dplyr/commit/ef1498e0df9eff6ff92088509160ad258d8fb4c4\n4 https://github.com/tidyverse/dplyr/commit/c0aebf05b0454c4b7021515a53d254cfc6d1e3a5\n5 https://github.com/tidyverse/dplyr/commit/746eb872b275e6632c6135243f9748affc28816c\n6 https://github.com/tidyverse/dplyr/commit/ea319ec1f48f20c5ec4de6ea36cd7b2729dbbea2\n                                                                                            comments_url\n1 https://api.github.com/repos/tidyverse/dplyr/commits/2f9a846ab65b7e192d3e7196e968e6f7d0a94289/comments\n2 https://api.github.com/repos/tidyverse/dplyr/commits/0c20aa37291450f97ae62fc8b14859e8e3021bbb/comments\n3 https://api.github.com/repos/tidyverse/dplyr/commits/ef1498e0df9eff6ff92088509160ad258d8fb4c4/comments\n4 https://api.github.com/repos/tidyverse/dplyr/commits/c0aebf05b0454c4b7021515a53d254cfc6d1e3a5/comments\n5 https://api.github.com/repos/tidyverse/dplyr/commits/746eb872b275e6632c6135243f9748affc28816c/comments\n6 https://api.github.com/repos/tidyverse/dplyr/commits/ea319ec1f48f20c5ec4de6ea36cd7b2729dbbea2/comments\n  author.login author.id       author.node_id\n1 DavisVaughan  19150088 MDQ6VXNlcjE5MTUwMDg4\n2 DavisVaughan  19150088 MDQ6VXNlcjE5MTUwMDg4\n3 DavisVaughan  19150088 MDQ6VXNlcjE5MTUwMDg4\n4 DavisVaughan  19150088 MDQ6VXNlcjE5MTUwMDg4\n5 DavisVaughan  19150088 MDQ6VXNlcjE5MTUwMDg4\n6 DavisVaughan  19150088 MDQ6VXNlcjE5MTUwMDg4\n                                     author.avatar_url author.gravatar_id\n1 https://avatars.githubusercontent.com/u/19150088?v=4                   \n2 https://avatars.githubusercontent.com/u/19150088?v=4                   \n3 https://avatars.githubusercontent.com/u/19150088?v=4                   \n4 https://avatars.githubusercontent.com/u/19150088?v=4                   \n5 https://avatars.githubusercontent.com/u/19150088?v=4                   \n6 https://avatars.githubusercontent.com/u/19150088?v=4                   \n                                 author.url                 author.html_url\n1 https://api.github.com/users/DavisVaughan https://github.com/DavisVaughan\n2 https://api.github.com/users/DavisVaughan https://github.com/DavisVaughan\n3 https://api.github.com/users/DavisVaughan https://github.com/DavisVaughan\n4 https://api.github.com/users/DavisVaughan https://github.com/DavisVaughan\n5 https://api.github.com/users/DavisVaughan https://github.com/DavisVaughan\n6 https://api.github.com/users/DavisVaughan https://github.com/DavisVaughan\n                                 author.followers_url\n1 https://api.github.com/users/DavisVaughan/followers\n2 https://api.github.com/users/DavisVaughan/followers\n3 https://api.github.com/users/DavisVaughan/followers\n4 https://api.github.com/users/DavisVaughan/followers\n5 https://api.github.com/users/DavisVaughan/followers\n6 https://api.github.com/users/DavisVaughan/followers\n                                              author.following_url\n1 https://api.github.com/users/DavisVaughan/following{/other_user}\n2 https://api.github.com/users/DavisVaughan/following{/other_user}\n3 https://api.github.com/users/DavisVaughan/following{/other_user}\n4 https://api.github.com/users/DavisVaughan/following{/other_user}\n5 https://api.github.com/users/DavisVaughan/following{/other_user}\n6 https://api.github.com/users/DavisVaughan/following{/other_user}\n                                           author.gists_url\n1 https://api.github.com/users/DavisVaughan/gists{/gist_id}\n2 https://api.github.com/users/DavisVaughan/gists{/gist_id}\n3 https://api.github.com/users/DavisVaughan/gists{/gist_id}\n4 https://api.github.com/users/DavisVaughan/gists{/gist_id}\n5 https://api.github.com/users/DavisVaughan/gists{/gist_id}\n6 https://api.github.com/users/DavisVaughan/gists{/gist_id}\n                                                author.starred_url\n1 https://api.github.com/users/DavisVaughan/starred{/owner}{/repo}\n2 https://api.github.com/users/DavisVaughan/starred{/owner}{/repo}\n3 https://api.github.com/users/DavisVaughan/starred{/owner}{/repo}\n4 https://api.github.com/users/DavisVaughan/starred{/owner}{/repo}\n5 https://api.github.com/users/DavisVaughan/starred{/owner}{/repo}\n6 https://api.github.com/users/DavisVaughan/starred{/owner}{/repo}\n                                 author.subscriptions_url\n1 https://api.github.com/users/DavisVaughan/subscriptions\n2 https://api.github.com/users/DavisVaughan/subscriptions\n3 https://api.github.com/users/DavisVaughan/subscriptions\n4 https://api.github.com/users/DavisVaughan/subscriptions\n5 https://api.github.com/users/DavisVaughan/subscriptions\n6 https://api.github.com/users/DavisVaughan/subscriptions\n                        author.organizations_url\n1 https://api.github.com/users/DavisVaughan/orgs\n2 https://api.github.com/users/DavisVaughan/orgs\n3 https://api.github.com/users/DavisVaughan/orgs\n4 https://api.github.com/users/DavisVaughan/orgs\n5 https://api.github.com/users/DavisVaughan/orgs\n6 https://api.github.com/users/DavisVaughan/orgs\n                                 author.repos_url\n1 https://api.github.com/users/DavisVaughan/repos\n2 https://api.github.com/users/DavisVaughan/repos\n3 https://api.github.com/users/DavisVaughan/repos\n4 https://api.github.com/users/DavisVaughan/repos\n5 https://api.github.com/users/DavisVaughan/repos\n6 https://api.github.com/users/DavisVaughan/repos\n                                           author.events_url\n1 https://api.github.com/users/DavisVaughan/events{/privacy}\n2 https://api.github.com/users/DavisVaughan/events{/privacy}\n3 https://api.github.com/users/DavisVaughan/events{/privacy}\n4 https://api.github.com/users/DavisVaughan/events{/privacy}\n5 https://api.github.com/users/DavisVaughan/events{/privacy}\n6 https://api.github.com/users/DavisVaughan/events{/privacy}\n                                 author.received_events_url author.type\n1 https://api.github.com/users/DavisVaughan/received_events        User\n2 https://api.github.com/users/DavisVaughan/received_events        User\n3 https://api.github.com/users/DavisVaughan/received_events        User\n4 https://api.github.com/users/DavisVaughan/received_events        User\n5 https://api.github.com/users/DavisVaughan/received_events        User\n6 https://api.github.com/users/DavisVaughan/received_events        User\n  author.user_view_type author.site_admin committer.login committer.id\n1                public             FALSE    DavisVaughan     19150088\n2                public             FALSE    DavisVaughan     19150088\n3                public             FALSE        web-flow     19864447\n4                public             FALSE        web-flow     19864447\n5                public             FALSE    DavisVaughan     19150088\n6                public             FALSE    DavisVaughan     19150088\n     committer.node_id                                 committer.avatar_url\n1 MDQ6VXNlcjE5MTUwMDg4 https://avatars.githubusercontent.com/u/19150088?v=4\n2 MDQ6VXNlcjE5MTUwMDg4 https://avatars.githubusercontent.com/u/19150088?v=4\n3 MDQ6VXNlcjE5ODY0NDQ3 https://avatars.githubusercontent.com/u/19864447?v=4\n4 MDQ6VXNlcjE5ODY0NDQ3 https://avatars.githubusercontent.com/u/19864447?v=4\n5 MDQ6VXNlcjE5MTUwMDg4 https://avatars.githubusercontent.com/u/19150088?v=4\n6 MDQ6VXNlcjE5MTUwMDg4 https://avatars.githubusercontent.com/u/19150088?v=4\n  committer.gravatar_id                             committer.url\n1                       https://api.github.com/users/DavisVaughan\n2                       https://api.github.com/users/DavisVaughan\n3                           https://api.github.com/users/web-flow\n4                           https://api.github.com/users/web-flow\n5                       https://api.github.com/users/DavisVaughan\n6                       https://api.github.com/users/DavisVaughan\n               committer.html_url\n1 https://github.com/DavisVaughan\n2 https://github.com/DavisVaughan\n3     https://github.com/web-flow\n4     https://github.com/web-flow\n5 https://github.com/DavisVaughan\n6 https://github.com/DavisVaughan\n                              committer.followers_url\n1 https://api.github.com/users/DavisVaughan/followers\n2 https://api.github.com/users/DavisVaughan/followers\n3     https://api.github.com/users/web-flow/followers\n4     https://api.github.com/users/web-flow/followers\n5 https://api.github.com/users/DavisVaughan/followers\n6 https://api.github.com/users/DavisVaughan/followers\n                                           committer.following_url\n1 https://api.github.com/users/DavisVaughan/following{/other_user}\n2 https://api.github.com/users/DavisVaughan/following{/other_user}\n3     https://api.github.com/users/web-flow/following{/other_user}\n4     https://api.github.com/users/web-flow/following{/other_user}\n5 https://api.github.com/users/DavisVaughan/following{/other_user}\n6 https://api.github.com/users/DavisVaughan/following{/other_user}\n                                        committer.gists_url\n1 https://api.github.com/users/DavisVaughan/gists{/gist_id}\n2 https://api.github.com/users/DavisVaughan/gists{/gist_id}\n3     https://api.github.com/users/web-flow/gists{/gist_id}\n4     https://api.github.com/users/web-flow/gists{/gist_id}\n5 https://api.github.com/users/DavisVaughan/gists{/gist_id}\n6 https://api.github.com/users/DavisVaughan/gists{/gist_id}\n                                             committer.starred_url\n1 https://api.github.com/users/DavisVaughan/starred{/owner}{/repo}\n2 https://api.github.com/users/DavisVaughan/starred{/owner}{/repo}\n3     https://api.github.com/users/web-flow/starred{/owner}{/repo}\n4     https://api.github.com/users/web-flow/starred{/owner}{/repo}\n5 https://api.github.com/users/DavisVaughan/starred{/owner}{/repo}\n6 https://api.github.com/users/DavisVaughan/starred{/owner}{/repo}\n                              committer.subscriptions_url\n1 https://api.github.com/users/DavisVaughan/subscriptions\n2 https://api.github.com/users/DavisVaughan/subscriptions\n3     https://api.github.com/users/web-flow/subscriptions\n4     https://api.github.com/users/web-flow/subscriptions\n5 https://api.github.com/users/DavisVaughan/subscriptions\n6 https://api.github.com/users/DavisVaughan/subscriptions\n                     committer.organizations_url\n1 https://api.github.com/users/DavisVaughan/orgs\n2 https://api.github.com/users/DavisVaughan/orgs\n3     https://api.github.com/users/web-flow/orgs\n4     https://api.github.com/users/web-flow/orgs\n5 https://api.github.com/users/DavisVaughan/orgs\n6 https://api.github.com/users/DavisVaughan/orgs\n                              committer.repos_url\n1 https://api.github.com/users/DavisVaughan/repos\n2 https://api.github.com/users/DavisVaughan/repos\n3     https://api.github.com/users/web-flow/repos\n4     https://api.github.com/users/web-flow/repos\n5 https://api.github.com/users/DavisVaughan/repos\n6 https://api.github.com/users/DavisVaughan/repos\n                                        committer.events_url\n1 https://api.github.com/users/DavisVaughan/events{/privacy}\n2 https://api.github.com/users/DavisVaughan/events{/privacy}\n3     https://api.github.com/users/web-flow/events{/privacy}\n4     https://api.github.com/users/web-flow/events{/privacy}\n5 https://api.github.com/users/DavisVaughan/events{/privacy}\n6 https://api.github.com/users/DavisVaughan/events{/privacy}\n                              committer.received_events_url committer.type\n1 https://api.github.com/users/DavisVaughan/received_events           User\n2 https://api.github.com/users/DavisVaughan/received_events           User\n3     https://api.github.com/users/web-flow/received_events           User\n4     https://api.github.com/users/web-flow/received_events           User\n5 https://api.github.com/users/DavisVaughan/received_events           User\n6 https://api.github.com/users/DavisVaughan/received_events           User\n  committer.user_view_type committer.site_admin\n1                   public                FALSE\n2                   public                FALSE\n3                   public                FALSE\n4                   public                FALSE\n5                   public                FALSE\n6                   public                FALSE\n                                                                                                                                                                                                                      parents\n1 0c20aa37291450f97ae62fc8b14859e8e3021bbb, https://api.github.com/repos/tidyverse/dplyr/commits/0c20aa37291450f97ae62fc8b14859e8e3021bbb, https://github.com/tidyverse/dplyr/commit/0c20aa37291450f97ae62fc8b14859e8e3021bbb\n2 ef1498e0df9eff6ff92088509160ad258d8fb4c4, https://api.github.com/repos/tidyverse/dplyr/commits/ef1498e0df9eff6ff92088509160ad258d8fb4c4, https://github.com/tidyverse/dplyr/commit/ef1498e0df9eff6ff92088509160ad258d8fb4c4\n3 c0aebf05b0454c4b7021515a53d254cfc6d1e3a5, https://api.github.com/repos/tidyverse/dplyr/commits/c0aebf05b0454c4b7021515a53d254cfc6d1e3a5, https://github.com/tidyverse/dplyr/commit/c0aebf05b0454c4b7021515a53d254cfc6d1e3a5\n4 746eb872b275e6632c6135243f9748affc28816c, https://api.github.com/repos/tidyverse/dplyr/commits/746eb872b275e6632c6135243f9748affc28816c, https://github.com/tidyverse/dplyr/commit/746eb872b275e6632c6135243f9748affc28816c\n5 ea319ec1f48f20c5ec4de6ea36cd7b2729dbbea2, https://api.github.com/repos/tidyverse/dplyr/commits/ea319ec1f48f20c5ec4de6ea36cd7b2729dbbea2, https://github.com/tidyverse/dplyr/commit/ea319ec1f48f20c5ec4de6ea36cd7b2729dbbea2\n6 ea305c0e563e22918dacd11e3519aad6daa906a1, https://api.github.com/repos/tidyverse/dplyr/commits/ea305c0e563e22918dacd11e3519aad6daa906a1, https://github.com/tidyverse/dplyr/commit/ea305c0e563e22918dacd11e3519aad6daa906a1\n```\n\n\n:::\n:::\n\n\nThen, we can extract specific data from the commits including details like the commit message, author, and date. We will create a simplified data frame with just these columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncommits_df <- tibble(\n    sha = commits$sha,\n    author = commits$commit$author$name,\n    date = commits$commit$author$date,\n    message = commits$commit$message)\ncommits_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 30 × 4\n   sha                                      author        date           message\n   <chr>                                    <chr>         <chr>          <chr>  \n 1 2f9a846ab65b7e192d3e7196e968e6f7d0a94289 Davis Vaughan 2025-10-02T20… \"Going…\n 2 0c20aa37291450f97ae62fc8b14859e8e3021bbb Davis Vaughan 2025-10-02T20… \"Docum…\n 3 ef1498e0df9eff6ff92088509160ad258d8fb4c4 Davis Vaughan 2025-10-02T19… \"Rewor…\n 4 c0aebf05b0454c4b7021515a53d254cfc6d1e3a5 Davis Vaughan 2025-10-02T18… \"Rewor…\n 5 746eb872b275e6632c6135243f9748affc28816c Davis Vaughan 2025-10-02T17… \"Isola…\n 6 ea319ec1f48f20c5ec4de6ea36cd7b2729dbbea2 Davis Vaughan 2025-10-02T17… \"Updat…\n 7 ea305c0e563e22918dacd11e3519aad6daa906a1 Davis Vaughan 2025-10-02T17… \"Soft-…\n 8 b3f211513e840e36fbda2dc7a8f6c108ae5ab90c Davis Vaughan 2025-10-02T15… \"Refre…\n 9 fbe4a4bc13ececfa99963caab31e32c865da3b98 Davis Vaughan 2025-10-01T13… \"Switc…\n10 29d3766355e2cc935847a356669904489e648a95 Davis Vaughan 2025-10-01T13… \"Depre…\n# ℹ 20 more rows\n```\n\n\n:::\n:::\n\n\n\n### Authentication\n\nAuthenticating with the GitHub API via an API key allows you to send much more requests to the API. \n\nAPI access keys for the GitHub API are called **personal access tokens** (PAT) and the [documentation explains how to generate a PAT](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token) once you have logged into your GitHub account. \n\n**To create a PAT**: You can create a PAT from your GitHub account (Settings > Developer settings > Personal access tokens). It’s a good idea to only grant “read” permissions.\n\n:::{.callout-tip}\n\n### Where to store API keys\n\nFirst, **please be careful with your PATs and never publish them.**\n\nIt is suggested you keep them in your `.Renviron` file which looks something like this on the inside: \n\n```\nGITHUB_PAT = <add my GitHub PAT here> \n```\n\nIf you do not have an `.Renviron` file in your home directory, you can make one: \n\n``` bash\ncd ~\ntouch .Renviron\n```\n\nIf you want additional guidance on where you should store them, I like this post: \n\n- <https://www.r-bloggers.com/2015/11/how-to-store-and-use-webservice-keys-and-authentication-details-with-r/> \n\n:::\n\n\nAssuming you have created and stored an API key in the `.Renviron` file in your home directory, you can fetch it with the `Sys.getenv()` function and use the PAT in our `httr2` request. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read the PAT from environment variables\ngithub_pat <- Sys.getenv(\"GITHUB_PAT\")\n\n# Make the GET request with PAT for authentication\nresponse <- request(url) %>%\n  req_auth_bearer_token(github_pat) %>%\n  req_perform()\n```\n:::\n\n\nNow, we check the response as before\n\n::: {.cell}\n\n```{.r .cell-code}\nif (resp_status(response) == 200) {\n  commits <- resp_body_json(response, simplifyVector = TRUE)\n  commits_df <- tibble(\n    sha = commits$sha,\n    author = commits$commit$author$name,\n    date = commits$commit$author$date,\n    message = commits$commit$message)\n  commits_df\n} else {\n  message(\"Failed to retrieve data. Status code: \", resp_status(response))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 30 × 4\n   sha                                      author        date           message\n   <chr>                                    <chr>         <chr>          <chr>  \n 1 2f9a846ab65b7e192d3e7196e968e6f7d0a94289 Davis Vaughan 2025-10-02T20… \"Going…\n 2 0c20aa37291450f97ae62fc8b14859e8e3021bbb Davis Vaughan 2025-10-02T20… \"Docum…\n 3 ef1498e0df9eff6ff92088509160ad258d8fb4c4 Davis Vaughan 2025-10-02T19… \"Rewor…\n 4 c0aebf05b0454c4b7021515a53d254cfc6d1e3a5 Davis Vaughan 2025-10-02T18… \"Rewor…\n 5 746eb872b275e6632c6135243f9748affc28816c Davis Vaughan 2025-10-02T17… \"Isola…\n 6 ea319ec1f48f20c5ec4de6ea36cd7b2729dbbea2 Davis Vaughan 2025-10-02T17… \"Updat…\n 7 ea305c0e563e22918dacd11e3519aad6daa906a1 Davis Vaughan 2025-10-02T17… \"Soft-…\n 8 b3f211513e840e36fbda2dc7a8f6c108ae5ab90c Davis Vaughan 2025-10-02T15… \"Refre…\n 9 fbe4a4bc13ececfa99963caab31e32c865da3b98 Davis Vaughan 2025-10-01T13… \"Switc…\n10 29d3766355e2cc935847a356669904489e648a95 Davis Vaughan 2025-10-01T13… \"Depre…\n# ℹ 20 more rows\n```\n\n\n:::\n:::\n\n\n\n\n### Example: Learn about Stephanie\n\n\nLet's start by using the GitHub API to learn information about myself (Stephanie Hicks). \nFirst, let's check out <https://api.github.com/users/stephaniehicks>. \n\nNow, we have decided to explore <https://api.github.com/users/stephaniehicks/repos>. \n\nTo use `httr2`, start by creating a request:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nowner <- \"stephaniehicks\"\nurl <- paste0(\"https://api.github.com/users/\", owner,\"/repos\")\n\n# Make the GET request with PAT for authentication\nresponse <- request(url) %>%\n  req_auth_bearer_token(github_pat) %>%\n  req_perform()\n\nstephanie <- resp_body_json(response, simplifyVector = TRUE)\n```\n:::\n\n\nWe convert the response to a parsed JSON file (or a list). \n\n## A bit of EDA fun\n\nLet's have a bit of fun and explore some questions:  \n\n- How many public repositories do I have? \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstephanie$forks\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  4  0  1  0  1  0  0  2  0  0  0  4  1  1  0  1 11  0  0  3  0  3  0  1  1\n[26]  0  0  0  0  0\n```\n\n\n:::\n:::\n\n\nWhat's the most popular language? \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(stephanie$language)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n            HTML Jupyter Notebook                R             Ruby \n               7                1               12                2 \n             TeX \n               1 \n```\n\n\n:::\n:::\n\n\nTo find out how many repos that I have\nwith open issues, we can just create \na table: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# how many repos have open issues? \ntable(stephanie$open_issues)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n 0  1 \n26  4 \n```\n\n\n:::\n:::\n\n\nWhew! Not as many as I thought.\n\n:::{.callout-tip}\n\n\n\n## Other examples with GitHub API\n\nFinally, I will leave you with a few other examples of using GitHub API: \n\n* [How long does it take to close a GitHub Issue in the `dplyr` package?](https://blog.exploratory.io/analyzing-issue-data-with-github-rest-api-63945017dedc)\n* [How to retrieve all commits for a branch](https://stackoverflow.com/questions/9179828/github-api-retrieve-all-commits-for-all-branches-for-a-repo)\n* [Getting my GitHub Activity](https://masalmon.eu/2017/12/21/wherehaveyoubeen/)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
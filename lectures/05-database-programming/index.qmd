---
title: "Database programming paradigms"
author: 
  - name: Stephanie Hicks
    url: https://stephaniehicks.com
    affiliation: Department of Biostatistics, Johns Hopkins
    affiliation_url: https://publichealth.jhu.edu
description: "Relational databases and SQL basics"
date: 2025-11-11
draft: true
---

# Pre-lecture activities

::: callout-important

For this lecture, we will use Unix shell, plus [SQLite3](https://www.sqlite.org/index.html) or [DB Browser for SQLite](https://sqlitebrowser.org).

You can see if the command-line tool `sqlite3` (also known as "SQLite") is already installed with 

```{bash}
sqlite3 --version
```

If not, you can follow the instructions here: 

- <https://swcarpentry.github.io/sql-novice-survey>

Also, you will need to install these R packages:

```{r}
#| eval: false
install.packages("DBI")
install.packages("RSQLite")
install.packages("dbplyr")
```

:::

In addition, please read through

- [Relational databases and SQL basics](../../readings/05-database-programming/index.qmd)
- <https://swcarpentry.github.io/sql-novice-survey> (Chapters 1-4)


::: callout-note

## How much should I prepare for before class? 

Please install the packages above and be comfortable with running the functions in the example code here: 

- <https://dbi.r-dbi.org>
- <https://solutions.posit.co/connections/db/databases/sqlite/>
- <https://dbplyr.tidyverse.org>

:::


# Lecture 

## Acknowledgements

Material for this lecture was borrowed and adopted from

- <https://swcarpentry.github.io/sql-novice-survey>


## Learning objectives

::: callout-note
### Learning objectives

**At the end of this lesson you will:**

- Explain the difference between a table, a record, and a field in relational databases
- Explain the difference between a database and a database manager
- Write a query to select all values for specific fields from a single table
- Write queries that display results in a particular order
- Write queries that eliminate duplicate values from data
- Write queries that select records that satisfy user-specified conditions
- Learn about the `DBI`, `RSQLite`, `dbplyr` packages for making SQL queries in R

:::



## Slides 

- [Lecture 05: Database programming paradigms](https://docs.google.com/presentation/d/1KzExDgW77QqyPbPRKpnd0GNHZbzfl9IgtLKIyEW6Bp0/edit?usp=sharing)

# Class activity 

For the rest of the time in class, we will practice creating a SQL database and also writing SQL syntax to analyze a Beyoncé discography dataset. 

::: callout-note
### Objectives of the activity

- Practice creating a SQL database in R .
- Practice filtering, grouping, and joining data using SQL commands.

:::

For this in-class activity, you need to find a partner. Work together on the following problems. Use the following datasets related to Beyoncé's songs for the activity. 

```{r}
songs <- data.frame(
  song_id = 1:10,
  title = c("Crazy in Love", "Halo", "Single Ladies", "Formation", "Irreplaceable", 
            "Drunk in Love", "Run the World", "Partition", "Love on Top", "Sorry"),
  album_id = c(1, 2, 1, 3, 2, 3, 1, 3, 2, 3),
  release_year = c(2003, 2008, 2008, 2016, 2006, 2013, 2011, 2013, 2011, 2016),
  streams_millions = c(500, 600, 700, 800, 900, 1000, 450, 350, 750, 900)
)

# Sample data frame for Beyoncé's albums
albums <- data.frame(
  album_id = 1:3,
  album_title = c("Dangerously in Love", "I Am... Sasha Fierce", "Lemonade"),
  release_year = c(2003, 2008, 2016)
)
```


## Part 1: Create a SQL database

- Create a new SQL database titled `beyonce.sqlite` using the `DBI` and `RSQLite` packages using the `dbConnect()` function. 
- Using the `dbWriteTable()` function, add the `songs` and `albums` datasets to the SQL database. 

::: {.callout-tip collapse="true"}
### Solution

```{r}
# This code to ensure that the lecture builds and there no SQL database at the start of the exercise
sql_beyonce <- here::here("data", "beyonce.sqlite")
if(file.exists(sql_beyonce)){
  file.remove(sql_beyonce)
}

library(DBI)
mydb <- dbConnect(drv = RSQLite::SQLite(), 
                  dbname = sql_beyonce)

dbWriteTable(conn = mydb, name = "songs", value = songs)
dbWriteTable(conn = mydb, name = "albums", value = albums)
dbListTables(conn = mydb)
```

:::

## Part 2: Practice SQL queries 

- Write a SQL query that selects all columns from the songs table where the number of streams is greater than 600 million.

::: {.callout-tip collapse="true"}
### Solution

```{r}
results <- dbGetQuery(mydb, "SELECT * 
                             FROM songs
                             WHERE streams_millions > 600;")
print(results)
```

:::

- Use SQL to select the titles of Beyoncé’s songs released after 2010, along with the year they were released.

::: {.callout-tip collapse="true"}
### Solution

```{r}
results <- dbGetQuery(mydb, "SELECT title, release_year 
                             FROM songs 
                             WHERE release_year > 2010;")
print(results)
```

:::


- Write a SQL query that counts the number of songs for each album.

::: {.callout-tip collapse="true"}
### Solution

```{r}
results <- dbGetQuery(mydb, "SELECT album_id, COUNT(song_id) AS song_count
                             FROM songs
                             GROUP BY album_id;")
print(results)
```

:::

- Write a SQL query that calculates the total streams for each album. Select the album ID, album title, and total streams.

::: {.callout-tip collapse="true"}
### Solution

```{r}
results <- dbGetQuery(mydb, "SELECT album_id, title, SUM(streams_millions) AS total_streams 
                             FROM songs 
                             GROUP BY album_id;")
print(results)
```

:::

- Identify the least streamed song for each release year.

::: {.callout-tip collapse="true"}
### Solution

```{r}
results <- dbGetQuery(mydb, "SELECT release_year, title, MIN(streams_millions) AS min_streams
                             FROM songs
                             GROUP BY release_year;")
print(results)
```



Close connection when done
```{r}
dbDisconnect(conn = mydb)
```

:::

## Part 3: Discussion

Discuss with your partner: 

- How does SQL make it easier to analyze and summarize data?
- Which SQL query might you use to quickly identify Beyoncé’s most popular song based on streams?
- How could these SQL skills be applied to other areas of data analysis?


# Post-lecture

## Additional practice

Here are some additional practice questions to help you think about the material discussed.

::: callout-note
### Questions

Using the `survey.db` database discussed in the [relational databases and SQL basics](../../readings/05-database-programming/index.qmd) pre-reading material: 

1. Use `.schema` to identify column that contains integers
2. Write a query that selects only the `name` column from the `Site` table.
3. Many people format queries in the following two ways. What style do you find easiest to read, and why?

```
SELECT personal, family FROM person;
```

or

```
select Personal, Family from PERSON;
```

4. Write a query that selects distinct dates from the `Visited` table.
5. Write a query that displays the full names of the scientists in the `Person` table, ordered by family name.

:::
---
title: "Demo reticulate in class"
format: html
---

# Setting up python in reticulate

```{r}
library(reticulate)
```

Functions to help you configure python with reticulate
```{r}
py_discover_config() # return all detected versions of Python
py_config() # to check which version has been loaded
virtualenv_list() # list all available virtualenvs
conda_list() # list all  available conda envs
```

Functions to help you suggest which version of python to use 

```{r}
# pick one 
use_condaenv(condaenv = "biostats777",  conda = "auto") # if you have a conda env
# use_python("/opt/homebrew/Caskroom/miniforge/base/envs/biostats777/bin/python") # hard coded
```

You can confirm that `reticulate` is using the correct version of python that you requested using the `py_discover_config` function:

```{r}
py_discover_config()
```


# Python basics

Python is a **high-level**, **object-oriented programming** language useful to know for anyone analyzing data.

The most important thing to know before learning Python, is that in Python, **everything is an object**.

-   There is no compiling and no need to define the type of variables before using them.
-   No need to allocate memory for variables.
-   The code is very easy to learn and easy to read (syntax).

There is a large scientific community contributing to Python. Some of the most widely used libraries in Python are `numpy`, `scipy`, `pandas`, and `matplotlib`.

## start python

There are two modes you can write Python code in: **interactive mode** or **script mode**. If you open up a UNIX command window and have a command-line interface, you can simply type `python` (or `python3`) in the shell:

```{bash, eval= FALSE}
python
```

and the **interactive mode** will open up. You can write code in the interactive mode and Python will *interpret* the code using the **python interpreter**.

Another way to pass code to Python is to store code in a file ending in `.py`, and execute the file in the **script mode** using

```{bash, eval=FALSE}
python lectures/12-programming-in-python/hello.py
```

To check what version of Python you are using, type the following in the shell:

```{bash, eval=FALSE}
python --version
```


## operators in python

We can use operators in python. Such as **numeric operators** are `+`, `-`, `*`, `/`, `**` (exponent), `%` (modulus if applied to integers) and **Boolean relational operators** are `==` (equal), `!=` (not equal), `>`, `<`, `>=` (greater than or equal to), `<=` (less than or equal to). 

```{python}
2 ** 3

x = 3 
x > 1 and x <= 5
```

And in R, the execution changes from Python to R seamlessly

```{r}
2^3 

x = 3
x > 1 & x <=5
```

## format operators

If `%` is applied to strings, this operator is the **format operator**. It tells Python how to format a list of values in a string. For example,

-   `%d` says to format the value as an integer
-   `%g` says to format the value as an float
-   `%s` says to format the value as an string

```{python}
print('In %d days, I have eaten %g %s.' % (5, 3.5, 'cupcakes'))
```

## functions

Python contains a small list of very useful **built-in functions**. All other functions need defined by the user or need to be imported from modules. 

New functions can be defined using one of the 31 keywords in Python `def`.

```{python}
def new_world(): 
    return 'Hello world!'
    
print(new_world())
```

The first line of the function (the header) must start with `def`, the name of the function (which can contain underscores), parentheses (with any arguments inside of it) and a colon. The arguments can be specified in any order.

The rest of the function (the body) always has an indentation of four spaces. If you define a function in the interactive mode, the interpreter will print ellipses (...) to let you know the function is not complete. To complete the function, enter an empty line (not necessary in a script).

To return a value from a function, use return. The function will immediately terminate and not run any code written past this point.

```{python}
def squared(x):
    """ Return the square of a  
        value """
    return x ** 2

print(squared(4))
```


## iteration

**Iterative loops** can be written with the `for`, `while` and `break` statements.

Defining a **`for` loop** is similar to defining a new function.

-   The header ends with a colon and the body is indented.
-   The function `range(n)` takes in an integer `n` and creates a set of values from `0` to `n - 1`.

```{python}
for i in range(3):
  print('Baby shark, doo doo doo doo doo doo!')
print('Baby shark!')
```

`for` loops are not just for counters, but they can iterate through many types of objects such as strings, lists and dictionaries.

The function `len()` can be used to:

-   Calculate the length of a string
-   Calculate the number of elements in a list
-   Calculate the number of items (key-value pairs) in a dictionary
-   Calculate the number elements in the tuple

```{python}
x = 'Baby shark!'
len(x)
```

## methods for each type of object (dot notation)

For strings, lists and dictionaries, there are set of methods you can use to manipulate the objects. In general, the notation for methods is the **dot notation**.

The syntax is the **name of the object** followed by a **dot** (or period) followed by the **name of the method**.

```{python}
x = "Hello Baltimore!"
x.split()
```

## Data structures

We have already seen lists. Python has other **data structures** built in.

-   Sets `{"a", "a", "a", "b"}` (unique elements)
-   Tuples `(1, 2, 3)` (a lot like lists but not mutable, i.e. need to create a new to modify)
-   Dictionaries

```{python}
dict = {"a" : 1, "b" : 2}
dict['a']
dict['b']
```

More about data structures can be founds [at the python docs](https://docs.python.org/3/tutorial/datastructures.html)




# From Python to R

As an example, you can use Pandas to read and manipulate data then easily plot the Pandas data frame using `ggplot2`:

Let's first create a `flights.csv` dataset in R and save it using `write_csv` from `readr`:

```{r}
# checks to see if a folder called "data" exists; if not, it creates the directory
if(!file.exists(here("data"))){
  dir.create(here("data"))
}

# checks to see if a file called "flights.csv" exists; if not, it saves it to the data folder
if(!file.exists(here("data", "flights.csv"))){
  readr::write_csv(nycflights13::flights, 
                   file = here("data", "flights.csv"))
}

nycflights13::flights %>% 
  head()
```

Next, we **use Python to read in the file** and do some data wrangling

```{python}
import pandas
flights_path = "/Users/stephaniehicks/Documents/github/teaching/jhustatprogramming2024/data/flights.csv"
flights = pandas.read_csv(flights_path)
flights = flights[flights['dest'] == "ORD"]
flights = flights[['carrier', 'dep_delay', 'arr_delay']]
flights = flights.dropna()
flights
```

```{r}
head(py$flights)
py$flights_path 
```

```{r}
class(py$flights)
class(py$flights_path)
```

Next, we can use R to **visualize the Pandas** `DataFrame`.

The data frame is **loaded in as an R object now** stored in the variable `py`.

```{r}
library(ggplot2)
ggplot(py$flights, aes(x = carrier, y = arr_delay)) + 
  geom_point() + 
  geom_jitter()
```


# From R to Python

Use R to read and manipulate data

```{r}
library(tidyverse)
library(here) 

flights <- read_csv(here("data","flights.csv")) %>%
  filter(dest == "ORD") %>%
  select(carrier, dep_delay, arr_delay) %>%
  na.omit()

flights
```


# Use Python to print R dataframe

If you recall, we can **access objects created within R chunks from Python** using the `r` object (e.g. `r.x` would access to `x` variable created within R from Python).

We can then ask for the first ten rows using the `head()` function in python.

```{python}
r.flights.head(10)
```

# Import python modules

You can use the `import()` function to import any Python module and call it from R. For example, this code imports the Python `os` module in python and calls the `listdir()` function:

```{r}
os <- import("os")
os$listdir(".")
```

Similarly, we can import the pandas library:

```{r}
pd <- import('pandas')
test <- pd$read_csv(here("data","flights.csv"))
head(test)
class(test)
```

or the scikit-learn python library:

```{r}
skl_lr <- import("sklearn.linear_model")
skl_lr
```

## Calling python scripts

```{r, eval=FALSE}
source_python("secret_functions.py")
subject_1 <- read_subject("secret_data.csv")
```

## Calling the python repl

If you want to work with Python interactively you can call the `repl_python()` function, which provides a Python REPL embedded within your R session.

```{r, eval=FALSE}
repl_python()
```

Enter exit within the Python REPL to return to the R prompt.

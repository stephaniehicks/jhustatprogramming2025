---
title: "Functional programming"
author: 
  - name: Stephanie Hicks
    url: https://stephaniehicks.com
    affiliation: Department of Biostatistics, Johns Hopkins
    affiliation_url: https://publichealth.jhu.edu
description: "Using the `purrr` package to work with functions and vectors"
date: 2025-11-04
draft: true
---


# Pre-lecture activities

::: callout-important

In advance of class, please install

* `purrr` - this provides a consistent functional programming interface to work with functions and vectors

You can do this by calling

```{r}
#| eval: false
install.packages("purrr")
```

And load the package using: 

```{r}
library(purrr)
```

:::

In addition, please read through

- [Functional programming](../../readings/03-functional-programming/index.qmd)
- <https://adv-r.hadley.nz/functionals.html>
- <https://raw.githubusercontent.com/rstudio/cheatsheets/main/purrr.pdf>


::: callout-note

## How much should I prepare for before class? 

You should have `purrr` installed and be familiar with the [`map()` function](https://adv-r.hadley.nz/functionals.html#map) along with [map variants](https://adv-r.hadley.nz/functionals.html#map-variants) in `purrr`. 

We will learn more about these functions in class, but we will also practice them at the end of class. 

:::


# Lecture 

## Acknowledgements

Material for this lecture was borrowed and adopted from

- <https://adv-r.hadley.nz/fp.html>
- <https://adv-r.hadley.nz/functionals.html>
- <https://raw.githubusercontent.com/rstudio/cheatsheets/main/purrr.pdf>


## Learning objectives

::: callout-note
### Learning objectives

**At the end of this lesson you will:**

- Be familiar with the concept of _functional languages_ and _functional styles_ of programming
- Get comfortable with the major functions in  `purrr` (e.g. the `map` family of functions) provides a nice interface to functional programming and list manipulation
- Practice the function `map` and its alternative `map_*` provide a neat way to iterate over a list or vector with the output in different data structures (instead of a `for` loop)
- Recongize the function `map2` and `pmap` allow having more than one list as input.
- Recongize the function `walk` and its alternatives `walk2`, `walk_*`, which do not provide any output.

:::

## Slides 

- [Lecture 03: Functional programming](https://docs.google.com/presentation/d/1t-io1cFFiWopAzN1saz2j0xnmMg3O60Y5NnOvQrsdpk/edit?usp=sharing)

# Class activity 

For the rest of the time in class, we will use the `mtcars` dataset to practice using functions from the `purrr` package. The purpose is to demonstrates how functional programming can simplify repeated operations on datasets. This dataset contains various measurements for different car models. Find a partner and complete the activities below together. After running each step, I encourage you to look at the outputs and transformations to understand how `purrr` is working with each column in the dataset.


::: callout-note
### Objectives of the activity

- Use `purrr::map_*` functions to calculate summary statistics for each column.
- Transform specific columns using functions from `purrr`.
- Apply a conditional transformation across the dataset.

:::

First, we will load two packages and create a copy of the `mtcars` dataset

```{r}
#| warning: false
#| messages: false
library(purrr)
library(dplyr)

data <- mtcars
```

#### Part 1: Basic column summaries

- Use `map_dbl()` to calculate the mean of each column in the mtcars dataset.

Hint: `map_dbl(data, mean)` will apply the mean function to each column and return a vector of means.

- Use `map_dbl()` to calculate the standard deviation of each column.

- Use `map()` to create a named list where each element is the range of values in a column.

::: {.callout-tip collapse="true"}
### Solution

```{r}
# Calculate the mean of each column
column_means <- map_dbl(data, mean)
column_means

# Calculate the standard deviation of each column
column_sds <- map_dbl(data, sd)
column_sds

# Calculate the range of each column
column_ranges <- map(data, range)
column_ranges

```

The first one will return a named vector of mean values for each column. The last one returns a named list where each element is a vector of the minimum and maximum values for each column. 

:::

#### Part 2: Conditional transformation with `map_if()`

- Use `map_if()` to multiply by 100 all columns where the mean is less than 20. For example, if the column represents miles per gallon, multiply each value by 100. 
- Check the resulting data frame. 

::: {.callout-tip collapse="true"}
### Solution

```{r}
transformed_data <- map_if(data, ~ mean(.x) < 20, ~ .x * 100)
transformed_data <- as.data.frame(transformed_data)  # Convert back to data frame if desired
transformed_data
```

This will multiply each element in columns where the mean is less than 20 by 100. Note that the output is a list; converting it back to a data frame makes it easier to view the result.

:::

#### Part 3: Apply a custom function with `map()`

- Write a custom function that takes a column and returns the log-transformed values if the mean of the column is greater than 20, otherwise returns the square root of the values. 

- Use `map()` to apply this custom function to each column.

::: {.callout-tip collapse="true"}
### Solution

```{r}
transform_column <- function(column) {
  if (mean(column) > 20) {
    log(column)
  } else {
    sqrt(column)
  }
}
```

```{r}
transformed_data_custom <- map(data, transform_column)
transformed_data_custom <- as.data.frame(transformed_data_custom)
transformed_data_custom
```

:::



#### Part 4: Row-wise transformation and aggregation

- First, define a function that assigns each row a fuel efficiency category based on `mpg`:

  - "High" if `mpg` > 25
  - "Medium" if `mpg` is between 20 and 25
  - "Low" if `mpg` < 20

- Use `map()` to apply this function row-wise and add the results as a new column in `mtcars`.

- Then, split the dataset by fuel efficiency category from the previous step. For each category, calculate the mean values of `hp`, `wt`, and `qsec` (1/4 mile time).


::: {.callout-tip collapse="true"}
### Solution

```{r}
# Function to assign fuel efficiency category based on mpg
fuel_efficiency <- function(row) {
  mpg <- row["mpg"]
  if (mpg > 25) {
    "High"
  } else if (mpg >= 20) {
    "Medium"
  } else {
    "Low"
  }
}

# Add fuel efficiency as a new column
mtcars$fuel_efficiency <- map_chr(asplit(mtcars, 1), fuel_efficiency)
mtcars
```

```{r}
# Split by fuel efficiency
efficiency_groups <- split(mtcars, mtcars$fuel_efficiency)

# Calculate mean hp, wt, and qsec for each group
efficiency_summary <- map(efficiency_groups, ~ map_dbl(.x[, c("hp", "wt", "qsec")], mean))
efficiency_summary
```

:::

#### Part 5: Visualizations and transformations

- Write a function that, for each row, converts `mpg` to a "fuel cost" using a hypothetical rate of $3 per gallon for a 100-mile journey where "fuel cost" = (100 mile journey / `mpg`) * $3 per gallon

- Use `map_dbl()` to apply this transformation to the `mpg` column and add it as a new column called `fuel_cost`.

- Using `map()` with `ggplot2`, create a bar plot of the average `fuel_cost` for each `cyl`. For each cylinder group, plot the average values of `mpg`, `hp`, and `wt`.



::: {.callout-tip collapse="true"}
### Solution

```{r}
# Calculate fuel cost based on mpg
calculate_fuel_cost <- function(mpg) {
  (100 / mpg) * 3
}

# Apply transformation to mpg column
mtcars$fuel_cost <- map_dbl(mtcars$mpg, calculate_fuel_cost)
mtcars
```

```{r}
library(ggplot2)

# Calculate average fuel cost for each cylinder group
avg_fuel_cost <- mtcars %>%
  group_by(cyl) %>%
  summarize(avg_fuel_cost = mean(fuel_cost))

# Plot average fuel cost by cylinder count
ggplot(avg_fuel_cost, aes(x = factor(cyl), y = avg_fuel_cost)) +
  geom_bar(stat = "identity") +
  labs(x = "Number of Cylinders", 
       y = "Average Fuel Cost ($)", 
       title = "Fuel Cost by Cylinder Group") +
  theme_minimal()
```
:::


# Post-lecture

## Additional practice

Here are some additional practice questions to help you think about the material discussed.

::: callout-note
### Questions

1. Use `as_mapper()` to explore how purrr generates anonymous functions for the integer, character, and list helpers. What helper allows you to extract attributes? Read the documentation to find out.

2. `map(1:3, ~ runif(2))` is a useful pattern for generating random numbers, but `map(1:3, runif(2))` is not. Why not? Can you explain why it returns the result that it does?

3. Can you write a section of code to demonstrate the central limit theorem primarily using the `purrr` package and/or using the R base package?  

4.  Use the appropriate `map()` function to:
    
    a) Compute the standard deviation of every column in a numeric data frame.
    
    a) Compute the standard deviation of every numeric column in a mixed data
       frame. (Hint: you will need to do it in two steps.)
       
    a) Compute the number of levels for every factor in a data frame.

5.  The following code simulates the performance of a t-test for non-normal 
    data. Extract the p-value from each test, then visualise.

    ```{r}
    trials <- map(1:100, ~ t.test(rpois(10, 10), rpois(7, 10)))
    ```

6.  Use `map()` to fit linear models to the `mtcars` dataset using the formulas
    stored in this list:

    ```{r}
    data(mtcars)
    formulas <- list(
      mpg ~ disp,
      mpg ~ I(1 / disp),
      mpg ~ disp + wt,
      mpg ~ I(1 / disp) + wt
    )
    ```

7.  Fit the model `mpg ~ disp` to each of the bootstrap replicates of `mtcars` 
    in the list below, then extract the $R^2$ of the model fit (Hint: you can
    compute the $R^2$ with `summary()`.)

    ```{r}
    bootstrap <- function(df) {
      df[sample(nrow(df), replace = TRUE), , drop = FALSE]
    }
    
    bootstraps <- map(1:10, ~ bootstrap(mtcars))
    ```
8. How does `purrr` make it easier to perform repeated transformations compared to base R? What are some use cases where conditional transformations like `map_if()` could be helpful in real-world data?


:::